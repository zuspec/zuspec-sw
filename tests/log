GNU gdb (GDB) Red Hat Enterprise Linux 8.2-16.el8
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ../packages/python/bin/python...done.
(gdb) run
Starting program: /project/fun/zuspec/zuspec-sw/packages/python/bin/python -m unittest unit.test_exec_stmts.TestExecStmts.test_if_else
Missing separate debuginfos, use: yum debuginfo-install glibc-2.28-164.el8.x86_64
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
debug_mgr_getFactory() 0x8302c0
--> zsp::parser::TaskLoadStandardLibrray::load
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: mkId: addr_reg_pkg
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitImport_stmt
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: executor_pkg
zsp::parser::AstBuilderInt: elem "executor_pkg"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::visitImport_stmt
--> zsp::parser::AstBuilderInt::visitImport_stmt
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: std_pkg
zsp::parser::AstBuilderInt: elem "std_pkg"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::visitImport_stmt
--> zsp::parser::AstBuilderInt::visitComponent_declaration
zsp::parser::AstBuilderInt: mkId: addr_space_base_c
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: addr_trait_s
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: empty_addr_trait_s
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_trait_s
zsp::parser::AstBuilderInt: elem "addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_space_base_c
zsp::parser::AstBuilderInt: elem "addr_space_base_c"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: contiguous_addr_space_c
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_addr_trait_s
zsp::parser::AstBuilderInt: elem "empty_addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_trait_s
zsp::parser::AstBuilderInt: elem "addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype add_region
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: add_region
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: Parameterized element
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: addr_region_s
zsp::parser::AstBuilderInt: elem "addr_region_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: r
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype add_nonallocatable_region
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: add_nonallocatable_region
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: Parameterized element
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: addr_region_s
zsp::parser::AstBuilderInt: elem "addr_region_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: r
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: byte_addressable
--> zsp::parser::AstBuilderInt::visitBool_type
<-- zsp::parser::AstBuilderInt::visitBool_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitBool_literal
<-- zsp::parser::AstBuilderInt::visitBool_literal
<-- zsp::parser::AstBuilderInt::visitExpression
zsp::parser::AstBuilderInt: mkId: byte_addressable
<-- zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: Parameterized element
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: contiguous_addr_space_c
zsp::parser::AstBuilderInt: elem "contiguous_addr_space_c"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: transparent_addr_space_c
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_addr_trait_s
zsp::parser::AstBuilderInt: elem "empty_addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_trait_s
zsp::parser::AstBuilderInt: elem "addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: addr_region_base_s
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: size
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: size
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: addr_region_s
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_region_base_s
zsp::parser::AstBuilderInt: elem "addr_region_base_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_addr_trait_s
zsp::parser::AstBuilderInt: elem "empty_addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_trait_s
zsp::parser::AstBuilderInt: elem "addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: trait
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: trait
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: transparent_addr_region_s
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: Parameterized element
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: addr_region_s
zsp::parser::AstBuilderInt: elem "addr_region_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_addr_trait_s
zsp::parser::AstBuilderInt: elem "empty_addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_trait_s
zsp::parser::AstBuilderInt: elem "addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: addr
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: addr
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: addr_claim_base_s
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: size
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: size
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: permanent
--> zsp::parser::AstBuilderInt::visitBool_type
<-- zsp::parser::AstBuilderInt::visitBool_type
zsp::parser::AstBuilderInt: mkId: permanent
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitConstraint_declaration
--> zsp::parser::AstBuilderInt::visitDefault_constraint
zsp::parser::AstBuilderInt: TODO
<-- zsp::parser::AstBuilderInt::visitDefault_constraint
<-- zsp::parser::AstBuilderInt::visitConstraint_declaration
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: addr_claim_s
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_claim_base_s
zsp::parser::AstBuilderInt: elem "addr_claim_base_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_addr_trait_s
zsp::parser::AstBuilderInt: elem "empty_addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_trait_s
zsp::parser::AstBuilderInt: elem "addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: trait
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: trait
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: alignment
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::mkDomainOpenRangeList
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 0
zsp::parser::AstBuilderInt: Unbased oct number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 1
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 2
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 3
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 4
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 5
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 6
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 7
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 8
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 9
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 10
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 11
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 12
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 13
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 14
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 15
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 16
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 17
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 18
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 19
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 20
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 21
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 22
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 23
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 24
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 25
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 26
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 27
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 28
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 29
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 30
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 31
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 32
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 33
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 34
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 35
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 36
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 37
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 38
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 39
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 40
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 41
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 42
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 43
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 44
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 45
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 46
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 47
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 48
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 49
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 50
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 51
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 52
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 53
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 54
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 55
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 56
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 57
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 58
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 59
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 60
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 61
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 62
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64'd2
zsp::parser::AstBuilderInt: Based dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 63
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::mkDomainOpenRangeList
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: alignment
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: transparent_addr_claim_s
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: Parameterized element
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: addr_claim_s
zsp::parser::AstBuilderInt: elem "addr_claim_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_addr_trait_s
zsp::parser::AstBuilderInt: elem "empty_addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_trait_s
zsp::parser::AstBuilderInt: elem "addr_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: addr
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: addr
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: sizeof_s
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: mkId: T
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: nbytes
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 1
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
zsp::parser::AstBuilderInt: mkId: nbytes
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: nbits
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 1
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
zsp::parser::AstBuilderInt: mkId: nbits
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitConst_field_declaration
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: nullhandle
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNull_ref
<-- zsp::parser::AstBuilderInt::visitNull_ref
<-- zsp::parser::AstBuilderInt::visitExpression
zsp::parser::AstBuilderInt: mkId: nullhandle
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitConst_field_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: sized_addr_handle_s
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: Parameterized element
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: e
zsp::parser::AstBuilderInt: elem "e"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: packed_s
zsp::parser::AstBuilderInt: elem "packed_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: SZ
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 0
zsp::parser::AstBuilderInt: Unbased oct number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: lsb
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitRef_path
--> zsp::parser::AstBuilderInt::mkExprRefPath
zsp::parser::AstBuilderInt: !static_ref_path: ExprRefPathContext
--> zsp::parser::AstBuilderInt::mkHierarchicalId
zsp::parser::AstBuilderInt: mkId: LITTLE_ENDIAN
<-- zsp::parser::AstBuilderInt::mkHierarchicalId
<-- zsp::parser::AstBuilderInt::mkExprRefPath
<-- zsp::parser::AstBuilderInt::visitRef_path
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: endianness_e
zsp::parser::AstBuilderInt: elem "endianness_e"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: e
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: hndl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype make_handle_from_claim
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: make_handle_from_claim
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_claim_base_s
zsp::parser::AstBuilderInt: elem "addr_claim_base_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: claim
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 0
zsp::parser::AstBuilderInt: Unbased oct number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
zsp::parser::AstBuilderInt: mkId: offset
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype make_handle_from_handle
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: make_handle_from_handle
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: handle
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: offset
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype addr_value
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: addr_value
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitImport_function
<-- zsp::parser::AstBuilderInt::visitImport_function
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype read8
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 8
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: read8
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype read16
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 16
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: read16
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype read32
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 32
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: read32
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype read64
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: read64
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype write8
zsp::parser::AstBuilderInt: mkId: write8
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 8
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: data
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype write16
zsp::parser::AstBuilderInt: mkId: write16
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 16
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: data
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype write32
zsp::parser::AstBuilderInt: mkId: write32
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 32
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: data
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype write64
zsp::parser::AstBuilderInt: mkId: write64
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: hndl
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: data
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitEnum_declaration
zsp::parser::AstBuilderInt: mkId: reg_access
zsp::parser::AstBuilderInt: mkId: READWRITE
zsp::parser::AstBuilderInt: mkId: READONLY
zsp::parser::AstBuilderInt: mkId: WRITEONLY
<-- zsp::parser::AstBuilderInt::visitEnum_declaration
--> zsp::parser::AstBuilderInt::visitComponent_declaration
zsp::parser::AstBuilderInt: mkId: reg_c
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: mkId: R
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitRef_path
--> zsp::parser::AstBuilderInt::mkExprRefPath
zsp::parser::AstBuilderInt: !static_ref_path: ExprRefPathContext
--> zsp::parser::AstBuilderInt::mkHierarchicalId
zsp::parser::AstBuilderInt: mkId: READWRITE
<-- zsp::parser::AstBuilderInt::mkHierarchicalId
<-- zsp::parser::AstBuilderInt::mkExprRefPath
<-- zsp::parser::AstBuilderInt::visitRef_path
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: reg_access
zsp::parser::AstBuilderInt: elem "reg_access"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: ACC
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 8
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitRef_path
--> zsp::parser::AstBuilderInt::mkExprRefPath
zsp::parser::AstBuilderInt: static_ref_path: 
zsp::parser::AstBuilderInt: !hierarchical_id: 
zsp::parser::AstBuilderInt: case1
zsp::parser::AstBuilderInt: Non-function static reference
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: R
zsp::parser::AstBuilderInt: elem "R"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: sizeof_s
zsp::parser::AstBuilderInt: mkId: nbytes
<-- zsp::parser::AstBuilderInt::mkExprRefPath
<-- zsp::parser::AstBuilderInt::visitRef_path
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: SZ2
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype read
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: R
zsp::parser::AstBuilderInt: elem "R"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: read
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitImport_function
<-- zsp::parser::AstBuilderInt::visitImport_function
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype write
zsp::parser::AstBuilderInt: mkId: write
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: R
zsp::parser::AstBuilderInt: elem "R"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: r
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitImport_function
<-- zsp::parser::AstBuilderInt::visitImport_function
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype read_val
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitRef_path
--> zsp::parser::AstBuilderInt::mkExprRefPath
zsp::parser::AstBuilderInt: !static_ref_path: ExprRefPathContext
--> zsp::parser::AstBuilderInt::mkHierarchicalId
zsp::parser::AstBuilderInt: mkId: SZ2
<-- zsp::parser::AstBuilderInt::mkHierarchicalId
<-- zsp::parser::AstBuilderInt::mkExprRefPath
<-- zsp::parser::AstBuilderInt::visitRef_path
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: read_val
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitImport_function
<-- zsp::parser::AstBuilderInt::visitImport_function
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype write_val
zsp::parser::AstBuilderInt: mkId: write_val
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitRef_path
--> zsp::parser::AstBuilderInt::mkExprRefPath
zsp::parser::AstBuilderInt: !static_ref_path: ExprRefPathContext
--> zsp::parser::AstBuilderInt::mkHierarchicalId
zsp::parser::AstBuilderInt: mkId: SZ2
<-- zsp::parser::AstBuilderInt::mkHierarchicalId
<-- zsp::parser::AstBuilderInt::mkExprRefPath
<-- zsp::parser::AstBuilderInt::visitRef_path
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: r
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitImport_function
<-- zsp::parser::AstBuilderInt::visitImport_function
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::visitComponent_declaration
zsp::parser::AstBuilderInt: mkId: reg_group_c
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype get_offset_of_instance
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: get_offset_of_instance
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitString_type
<-- zsp::parser::AstBuilderInt::visitString_type
zsp::parser::AstBuilderInt: mkId: name
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype get_offset_of_instance_array
--> zsp::parser::AstBuilderInt::visitInteger_type
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 64
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: get_offset_of_instance_array
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitString_type
<-- zsp::parser::AstBuilderInt::visitString_type
zsp::parser::AstBuilderInt: mkId: name
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: index
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype set_handle
zsp::parser::AstBuilderInt: mkId: set_handle
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_handle_t
zsp::parser::AstBuilderInt: elem "addr_handle_t"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: addr
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::visitImport_function
<-- zsp::parser::AstBuilderInt::visitImport_function
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitComponent_declaration
zsp::parser::AstBuilderInt: -- pop_scope
zsp::parser::AstBuilderInt: -- pop_scope
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: mkId: executor_pkg
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitImport_stmt
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: addr_reg_pkg
zsp::parser::AstBuilderInt: elem "addr_reg_pkg"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::visitImport_stmt
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: executor_trait_s
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: empty_executor_trait_s
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: executor_trait_s
zsp::parser::AstBuilderInt: elem "executor_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitComponent_declaration
zsp::parser::AstBuilderInt: mkId: executor_base_c
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: executor_base_c
zsp::parser::AstBuilderInt: elem "executor_base_c"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: executor_c
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_executor_trait_s
zsp::parser::AstBuilderInt: elem "empty_executor_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: executor_trait_s
zsp::parser::AstBuilderInt: elem "executor_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: trait
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: trait
<-- zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::visitComponent_declaration
zsp::parser::AstBuilderInt: mkId: executor_group_c
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_executor_trait_s
zsp::parser::AstBuilderInt: elem "empty_executor_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: executor_trait_s
zsp::parser::AstBuilderInt: elem "executor_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype add_executor
zsp::parser::AstBuilderInt: mkId: add_executor
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitReference_type
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: Parameterized element
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: executor_c
zsp::parser::AstBuilderInt: elem "executor_c"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
<-- zsp::parser::AstBuilderInt::visitReference_type
zsp::parser::AstBuilderInt: mkId: exe
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitComponent_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: executor_claim_s
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: empty_executor_trait_s
zsp::parser::AstBuilderInt: elem "empty_executor_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: executor_trait_s
zsp::parser::AstBuilderInt: elem "executor_trait_s"
<-- zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitAttr_field
--> zsp::parser::AstBuilderInt::visitData_declaration
zsp::parser::AstBuilderInt: Name: trait
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: TRAIT
zsp::parser::AstBuilderInt: elem "TRAIT"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: trait
<-- zsp::parser::AstBuilderInt::visitData_declaration
<-- zsp::parser::AstBuilderInt::visitAttr_field
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype executor
--> zsp::parser::AstBuilderInt::visitReference_type
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: executor_base_c
zsp::parser::AstBuilderInt: elem "executor_base_c"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
<-- zsp::parser::AstBuilderInt::visitReference_type
zsp::parser::AstBuilderInt: mkId: executor
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
zsp::parser::AstBuilderInt: -- pop_scope
zsp::parser::AstBuilderInt: -- pop_scope
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: packed
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: mkId: T
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: -- pop_scope
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: mkId: std_pkg
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitEnum_declaration
zsp::parser::AstBuilderInt: mkId: endianness_e
zsp::parser::AstBuilderInt: mkId: LITTLE_ENDIAN
zsp::parser::AstBuilderInt: mkId: BIG_ENDIAN
<-- zsp::parser::AstBuilderInt::visitEnum_declaration
--> zsp::parser::AstBuilderInt::visitStruct_declaration
zsp::parser::AstBuilderInt: mkId: packed_s
--> zsp::parser::AstBuilderInt::mkTypeParamDecl
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitRef_path
--> zsp::parser::AstBuilderInt::mkExprRefPath
zsp::parser::AstBuilderInt: !static_ref_path: ExprRefPathContext
--> zsp::parser::AstBuilderInt::mkHierarchicalId
zsp::parser::AstBuilderInt: mkId: LITTLE_ENDIAN
<-- zsp::parser::AstBuilderInt::mkHierarchicalId
<-- zsp::parser::AstBuilderInt::mkExprRefPath
<-- zsp::parser::AstBuilderInt::visitRef_path
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitType_identifier
--> zsp::parser::AstBuilderInt::mkDataTypeUserDefined
--> zsp::parser::AstBuilderInt::mkTypeId
zsp::parser::AstBuilderInt: mkId: endianness_e
zsp::parser::AstBuilderInt: elem "endianness_e"
<-- zsp::parser::AstBuilderInt::mkTypeId
<-- zsp::parser::AstBuilderInt::mkDataTypeUserDefined
<-- zsp::parser::AstBuilderInt::visitType_identifier
zsp::parser::AstBuilderInt: mkId: e
<-- zsp::parser::AstBuilderInt::mkTypeParamDecl
zsp::parser::AstBuilderInt: -- push_scope
zsp::parser::AstBuilderInt: -- pop_scope
<-- zsp::parser::AstBuilderInt::visitStruct_declaration
--> zsp::parser::AstBuilderInt::visitFunction_decl
--> zsp::parser::AstBuilderInt::mkFunctionPrototype print
zsp::parser::AstBuilderInt: mkId: print
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitString_type
<-- zsp::parser::AstBuilderInt::visitString_type
zsp::parser::AstBuilderInt: mkId: fmt
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitFunction_decl
zsp::parser::AstBuilderInt: -- pop_scope
zsp::parser::AstBuilderInt: -- pop_scope
--> zsp::parser::TaskLoadStandardLibrray::visitComponent addr_space_base_c
<-- zsp::parser::TaskLoadStandardLibrray::visitComponent addr_space_base_c
--> zsp::parser::TaskLoadStandardLibrray::visitStruct addr_trait_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct addr_trait_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct empty_addr_trait_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct empty_addr_trait_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct addr_handle_t
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct addr_handle_t
--> zsp::parser::TaskLoadStandardLibrray::visitComponent contiguous_addr_space_c
<-- zsp::parser::TaskLoadStandardLibrray::visitComponent contiguous_addr_space_c
--> zsp::parser::TaskLoadStandardLibrray::visitComponent transparent_addr_space_c
<-- zsp::parser::TaskLoadStandardLibrray::visitComponent transparent_addr_space_c
--> zsp::parser::TaskLoadStandardLibrray::visitStruct addr_region_base_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct addr_region_base_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct addr_region_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct addr_region_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct transparent_addr_region_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct transparent_addr_region_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct addr_claim_base_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct addr_claim_base_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct addr_claim_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct addr_claim_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct transparent_addr_claim_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct transparent_addr_claim_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct sizeof_s
zsp::parser::TaskLoadStandardLibrray: Setting associated-data for SizeofS
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct sizeof_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct sized_addr_handle_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct sized_addr_handle_s
--> zsp::parser::TaskLoadStandardLibrray::visitComponent reg_c
<-- zsp::parser::TaskLoadStandardLibrray::visitComponent reg_c
--> zsp::parser::TaskLoadStandardLibrray::visitComponent reg_group_c
<-- zsp::parser::TaskLoadStandardLibrray::visitComponent reg_group_c
--> zsp::parser::TaskLoadStandardLibrray::visitStruct executor_trait_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct executor_trait_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct empty_executor_trait_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct empty_executor_trait_s
--> zsp::parser::TaskLoadStandardLibrray::visitComponent executor_base_c
<-- zsp::parser::TaskLoadStandardLibrray::visitComponent executor_base_c
--> zsp::parser::TaskLoadStandardLibrray::visitComponent executor_c
<-- zsp::parser::TaskLoadStandardLibrray::visitComponent executor_c
--> zsp::parser::TaskLoadStandardLibrray::visitComponent executor_group_c
<-- zsp::parser::TaskLoadStandardLibrray::visitComponent executor_group_c
--> zsp::parser::TaskLoadStandardLibrray::visitStruct executor_claim_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct executor_claim_s
--> zsp::parser::TaskLoadStandardLibrray::visitStruct packed
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct packed
--> zsp::parser::TaskLoadStandardLibrray::visitStruct packed_s
<-- zsp::parser::TaskLoadStandardLibrray::visitStruct packed_s
<-- zsp::parser::TaskLoadStandardLibrray::load
zsp::parser::AstBuilderInt: -- push_scope
--> zsp::parser::AstBuilderInt::visitProcedural_function
zsp::parser::AstBuilderInt: Function has 3 statements
--> zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::visitProcedural_data_declaration
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: k
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: j
<-- zsp::parser::AstBuilderInt::visitProcedural_data_declaration
<-- zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::addExecStmt
<-- zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::visitProcedural_sequence_block_stmt
--> zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::visitProcedural_data_declaration
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: z
<-- zsp::parser::AstBuilderInt::visitProcedural_data_declaration
<-- zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::addExecStmt
<-- zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::visitProcedural_if_else_stmt
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitBool_literal
<-- zsp::parser::AstBuilderInt::visitBool_literal
<-- zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitProcedural_sequence_block_stmt
--> zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::visitProcedural_assignment_stmt
--> zsp::parser::AstBuilderInt::mkExprRefPath
zsp::parser::AstBuilderInt: !static_ref_path: ExprRefPathContext
--> zsp::parser::AstBuilderInt::mkHierarchicalId
zsp::parser::AstBuilderInt: mkId: k
<-- zsp::parser::AstBuilderInt::mkHierarchicalId
<-- zsp::parser::AstBuilderInt::mkExprRefPath
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 1
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitProcedural_assignment_stmt
<-- zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::addExecStmt
--> zsp::parser::AstBuilderInt::visitProcedural_assignment_stmt
--> zsp::parser::AstBuilderInt::mkExprRefPath
zsp::parser::AstBuilderInt: !static_ref_path: ExprRefPathContext
--> zsp::parser::AstBuilderInt::mkHierarchicalId
zsp::parser::AstBuilderInt: mkId: z
<-- zsp::parser::AstBuilderInt::mkHierarchicalId
<-- zsp::parser::AstBuilderInt::mkExprRefPath
--> zsp::parser::AstBuilderInt::visitExpression
--> zsp::parser::AstBuilderInt::visitNumber 2
zsp::parser::AstBuilderInt: Unbased dec number
<-- zsp::parser::AstBuilderInt::visitNumber
<-- zsp::parser::AstBuilderInt::visitExpression
<-- zsp::parser::AstBuilderInt::visitProcedural_assignment_stmt
<-- zsp::parser::AstBuilderInt::addExecStmt
<-- zsp::parser::AstBuilderInt::visitProcedural_sequence_block_stmt
zsp::parser::AstBuilderInt: Add initial if clause
zsp::parser::AstBuilderInt: No final 'else' clause
<-- zsp::parser::AstBuilderInt::visitProcedural_if_else_stmt
<-- zsp::parser::AstBuilderInt::addExecStmt
<-- zsp::parser::AstBuilderInt::visitProcedural_sequence_block_stmt
<-- zsp::parser::AstBuilderInt::addExecStmt
zsp::parser::AstBuilderInt: Result is 3 statements in body
--> zsp::parser::AstBuilderInt::mkFunctionPrototype doit
zsp::parser::AstBuilderInt: mkId: doit
--> zsp::parser::AstBuilderInt::mkFunctionParamDecl
--> zsp::parser::AstBuilderInt::visitInteger_type
<-- zsp::parser::AstBuilderInt::visitInteger_type
zsp::parser::AstBuilderInt: mkId: i
<-- zsp::parser::AstBuilderInt::mkFunctionParamDecl
<-- zsp::parser::AstBuilderInt::mkFunctionPrototype
<-- zsp::parser::AstBuilderInt::visitProcedural_function
zsp::parser::AstBuilderInt: -- pop_scope
--> TaskBuildSymbolTree::build
--> TaskBuildSymbolTree::visitBuiltins
--> TaskBuildSymbolTree::visitTypeScope pyobj
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope pyobj
<-- TaskBuildSymbolTree::visitBuiltins
--> TaskBuildSymbolTree::visitPackageScope
TaskBuildSymbolTree:   process name-elem addr_reg_pkg
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitPackageImportStmt
TaskBuildSymbolTree: Create new ImportSpec
TaskBuildSymbolTree: Add import to scope addr_reg_pkg
<-- TaskBuildSymbolTree::visitPackageImportStmt
--> TaskBuildSymbolTree::visitPackageImportStmt
TaskBuildSymbolTree: Add import to scope addr_reg_pkg
<-- TaskBuildSymbolTree::visitPackageImportStmt
--> TaskBuildSymbolTree::visitTypeScope addr_space_base_c
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope addr_space_base_c
--> TaskBuildSymbolTree::visitTypeScope addr_trait_s
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope addr_trait_s
--> TaskBuildSymbolTree::visitTypeScope empty_addr_trait_s
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope empty_addr_trait_s
--> TaskBuildSymbolTree::visitTypeScope addr_handle_t
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope addr_handle_t
--> TaskBuildSymbolTree::visitTypeScope contiguous_addr_space_c
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitFunctionPrototype add_region
TaskBuildSymbolTree: mkSymbolFunctionScope add_region (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype add_region
--> TaskBuildSymbolTree::visitFunctionPrototype add_nonallocatable_region
TaskBuildSymbolTree: mkSymbolFunctionScope add_nonallocatable_region (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype add_nonallocatable_region
--> TaskBuildSymbolTree::visitField byte_addressable
<-- TaskBuildSymbolTree::visitField byte_addressable
<-- TaskBuildSymbolTree::visitTypeScope contiguous_addr_space_c
--> TaskBuildSymbolTree::visitTypeScope transparent_addr_space_c
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope transparent_addr_space_c
--> TaskBuildSymbolTree::visitTypeScope addr_region_base_s
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField size
<-- TaskBuildSymbolTree::visitField size
<-- TaskBuildSymbolTree::visitTypeScope addr_region_base_s
--> TaskBuildSymbolTree::visitTypeScope addr_region_s
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField trait
<-- TaskBuildSymbolTree::visitField trait
<-- TaskBuildSymbolTree::visitTypeScope addr_region_s
--> TaskBuildSymbolTree::visitTypeScope transparent_addr_region_s
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField addr
<-- TaskBuildSymbolTree::visitField addr
<-- TaskBuildSymbolTree::visitTypeScope transparent_addr_region_s
--> TaskBuildSymbolTree::visitTypeScope addr_claim_base_s
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField size
<-- TaskBuildSymbolTree::visitField size
--> TaskBuildSymbolTree::visitField permanent
<-- TaskBuildSymbolTree::visitField permanent
--> TaskBuildSymbolTree::visitConstraintBlock
--> TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::visitConstraintBlock
<-- TaskBuildSymbolTree::visitTypeScope addr_claim_base_s
--> TaskBuildSymbolTree::visitTypeScope addr_claim_s
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField trait
<-- TaskBuildSymbolTree::visitField trait
--> TaskBuildSymbolTree::visitField alignment
<-- TaskBuildSymbolTree::visitField alignment
<-- TaskBuildSymbolTree::visitTypeScope addr_claim_s
--> TaskBuildSymbolTree::visitTypeScope transparent_addr_claim_s
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField addr
<-- TaskBuildSymbolTree::visitField addr
<-- TaskBuildSymbolTree::visitTypeScope transparent_addr_claim_s
--> TaskBuildSymbolTree::visitTypeScope sizeof_s
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField nbytes
<-- TaskBuildSymbolTree::visitField nbytes
--> TaskBuildSymbolTree::visitField nbits
<-- TaskBuildSymbolTree::visitField nbits
<-- TaskBuildSymbolTree::visitTypeScope sizeof_s
--> TaskBuildSymbolTree::visitField nullhandle
<-- TaskBuildSymbolTree::visitField nullhandle
--> TaskBuildSymbolTree::visitTypeScope sized_addr_handle_s
TaskBuildSymbolTree: Build out plist 3
TaskBuildSymbolTree:   Param: 
TaskBuildSymbolTree:   Param: 
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField hndl
<-- TaskBuildSymbolTree::visitField hndl
<-- TaskBuildSymbolTree::visitTypeScope sized_addr_handle_s
--> TaskBuildSymbolTree::visitFunctionPrototype make_handle_from_claim
TaskBuildSymbolTree: mkSymbolFunctionScope make_handle_from_claim (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype make_handle_from_claim
--> TaskBuildSymbolTree::visitFunctionPrototype make_handle_from_handle
TaskBuildSymbolTree: mkSymbolFunctionScope make_handle_from_handle (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype make_handle_from_handle
--> TaskBuildSymbolTree::visitFunctionPrototype addr_value
TaskBuildSymbolTree: mkSymbolFunctionScope addr_value (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype addr_value
--> TaskBuildSymbolTree::visitFunctionPrototype read8
TaskBuildSymbolTree: mkSymbolFunctionScope read8 (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype read8
--> TaskBuildSymbolTree::visitFunctionPrototype read16
TaskBuildSymbolTree: mkSymbolFunctionScope read16 (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype read16
--> TaskBuildSymbolTree::visitFunctionPrototype read32
TaskBuildSymbolTree: mkSymbolFunctionScope read32 (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype read32
--> TaskBuildSymbolTree::visitFunctionPrototype read64
TaskBuildSymbolTree: mkSymbolFunctionScope read64 (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype read64
--> TaskBuildSymbolTree::visitFunctionPrototype write8
TaskBuildSymbolTree: mkSymbolFunctionScope write8 (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype write8
--> TaskBuildSymbolTree::visitFunctionPrototype write16
TaskBuildSymbolTree: mkSymbolFunctionScope write16 (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype write16
--> TaskBuildSymbolTree::visitFunctionPrototype write32
TaskBuildSymbolTree: mkSymbolFunctionScope write32 (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype write32
--> TaskBuildSymbolTree::visitFunctionPrototype write64
TaskBuildSymbolTree: mkSymbolFunctionScope write64 (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype write64
--> TaskBuildSymbolTree::visitEnumDecl reg_access
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitEnumItem READWRITE
<-- TaskBuildSymbolTree::visitEnumItem READWRITE
--> TaskBuildSymbolTree::visitEnumItem READONLY
<-- TaskBuildSymbolTree::visitEnumItem READONLY
--> TaskBuildSymbolTree::visitEnumItem WRITEONLY
<-- TaskBuildSymbolTree::visitEnumItem WRITEONLY
<-- TaskBuildSymbolTree::visitEnumDecl reg_access
--> TaskBuildSymbolTree::visitTypeScope reg_c
TaskBuildSymbolTree: Build out plist 3
TaskBuildSymbolTree:   Param: 
TaskBuildSymbolTree:   Param: 
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitFunctionPrototype read
TaskBuildSymbolTree: mkSymbolFunctionScope read (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype read
--> TaskBuildSymbolTree::visitFunctionPrototype write
TaskBuildSymbolTree: mkSymbolFunctionScope write (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype write
--> TaskBuildSymbolTree::visitFunctionPrototype read_val
TaskBuildSymbolTree: mkSymbolFunctionScope read_val (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype read_val
--> TaskBuildSymbolTree::visitFunctionPrototype write_val
TaskBuildSymbolTree: mkSymbolFunctionScope write_val (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype write_val
<-- TaskBuildSymbolTree::visitTypeScope reg_c
--> TaskBuildSymbolTree::visitTypeScope reg_group_c
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitFunctionPrototype get_offset_of_instance
TaskBuildSymbolTree: mkSymbolFunctionScope get_offset_of_instance (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype get_offset_of_instance
--> TaskBuildSymbolTree::visitFunctionPrototype get_offset_of_instance_array
TaskBuildSymbolTree: mkSymbolFunctionScope get_offset_of_instance_array (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype get_offset_of_instance_array
--> TaskBuildSymbolTree::visitFunctionPrototype set_handle
TaskBuildSymbolTree: mkSymbolFunctionScope set_handle (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype set_handle
<-- TaskBuildSymbolTree::visitTypeScope reg_group_c
<-- TaskBuildSymbolTree::visitPackageScope
--> TaskBuildSymbolTree::visitPackageScope
TaskBuildSymbolTree:   process name-elem executor_pkg
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitPackageImportStmt
TaskBuildSymbolTree: Create new ImportSpec
TaskBuildSymbolTree: Add import to scope executor_pkg
<-- TaskBuildSymbolTree::visitPackageImportStmt
--> TaskBuildSymbolTree::visitTypeScope executor_trait_s
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope executor_trait_s
--> TaskBuildSymbolTree::visitTypeScope empty_executor_trait_s
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope empty_executor_trait_s
--> TaskBuildSymbolTree::visitTypeScope executor_base_c
TaskBuildSymbolTree: No plist
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope executor_base_c
--> TaskBuildSymbolTree::visitTypeScope executor_c
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField trait
<-- TaskBuildSymbolTree::visitField trait
<-- TaskBuildSymbolTree::visitTypeScope executor_c
--> TaskBuildSymbolTree::visitTypeScope executor_group_c
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitFunctionPrototype add_executor
TaskBuildSymbolTree: mkSymbolFunctionScope add_executor (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype add_executor
<-- TaskBuildSymbolTree::visitTypeScope executor_group_c
--> TaskBuildSymbolTree::visitTypeScope executor_claim_s
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitField trait
<-- TaskBuildSymbolTree::visitField trait
<-- TaskBuildSymbolTree::visitTypeScope executor_claim_s
--> TaskBuildSymbolTree::visitFunctionPrototype executor
TaskBuildSymbolTree: mkSymbolFunctionScope executor (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype executor
<-- TaskBuildSymbolTree::visitPackageScope
--> TaskBuildSymbolTree::visitTypeScope packed
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope packed
--> TaskBuildSymbolTree::visitPackageScope
TaskBuildSymbolTree:   process name-elem std_pkg
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitEnumDecl endianness_e
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
--> TaskBuildSymbolTree::visitEnumItem LITTLE_ENDIAN
<-- TaskBuildSymbolTree::visitEnumItem LITTLE_ENDIAN
--> TaskBuildSymbolTree::visitEnumItem BIG_ENDIAN
<-- TaskBuildSymbolTree::visitEnumItem BIG_ENDIAN
<-- TaskBuildSymbolTree::visitEnumDecl endianness_e
--> TaskBuildSymbolTree::visitTypeScope packed_s
TaskBuildSymbolTree: Build out plist 1
TaskBuildSymbolTree:   Param: 
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitTypeScope packed_s
--> TaskBuildSymbolTree::visitFunctionPrototype print
TaskBuildSymbolTree: mkSymbolFunctionScope print (3)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::visitFunctionPrototype print
<-- TaskBuildSymbolTree::visitPackageScope
--> TaskBuildSymbolTree::visitFunctionDefinition doit
TaskBuildSymbolTree: mkSymbolFunctionScope doit (1)
--> TaskBuildSymbolTree::addChild(SymbolChild
<-- TaskBuildSymbolTree::addChild(SymbolChild
TaskBuildSymbolTree: Add parameter i to function symtab
TaskBuildSymbolTree: Function body has 3 statements
--> TaskBuildSymbolTree::visitProceduralStmtDataDeclaration k
TaskBuildSymbolTree: DataDeclaration k: 0
<-- TaskBuildSymbolTree::visitProceduralStmtDataDeclaration
--> TaskBuildSymbolTree::visitProceduralStmtDataDeclaration j
TaskBuildSymbolTree: DataDeclaration j: 1
<-- TaskBuildSymbolTree::visitProceduralStmtDataDeclaration
--> TaskBuildSymbolTree::visitExecScope
TaskBuildSymbolTree: Adding to scope doit
--> TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::addChild(ScopeChild)
--> TaskBuildSymbolTree::visitProceduralStmtDataDeclaration z
TaskBuildSymbolTree: DataDeclaration z: 0
<-- TaskBuildSymbolTree::visitProceduralStmtDataDeclaration
--> TaskBuildSymbolTree::visitProceduralStmtIfElse
--> TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::addChild(ScopeChild)
--> TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::addChild(ScopeChild)
--> TaskBuildSymbolTree::visitScopeChild
--> TaskBuildSymbolTree::addChild(ScopeChild)
TaskBuildSymbolTree: Setting cond-connector target
<-- TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::visitScopeChild
--> TaskBuildSymbolTree::visitExecScope
TaskBuildSymbolTree: Adding to scope <null>
--> TaskBuildSymbolTree::addChild(ScopeChild)
TaskBuildSymbolTree: Setting cond-connector target
<-- TaskBuildSymbolTree::addChild(ScopeChild)
--> TaskBuildSymbolTree::visitExecStmt
TaskBuildSymbolTree: Adding to scope <inner-exec>
--> TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::visitExecStmt
--> TaskBuildSymbolTree::visitExecStmt
TaskBuildSymbolTree: Adding to scope <inner-exec>
--> TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::addChild(ScopeChild)
<-- TaskBuildSymbolTree::visitExecStmt
<-- TaskBuildSymbolTree::visitExecScope
<-- TaskBuildSymbolTree::visitProceduralStmtIfElse
<-- TaskBuildSymbolTree::visitExecScope
<-- TaskBuildSymbolTree::visitFunctionDefinition doit
<-- TaskBuildSymbolTree::build
--> TaskApplyTypeExtensions::apply
--> TaskApplyTypeExtensions::visitSymbolScope ()
--> TaskApplyTypeExtensions::visitSymbolTypeScope pyobj
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolScope (addr_reg_pkg)
--> TaskApplyTypeExtensions::  Resolve Imports
--> TaskResolveImports::resolve
--> TaskResolveImports::visitPackageImportStmt executor_pkg
--> TaskResolveImports::  Resolve path
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier executor_pkg
--> TaskResolveRootRef::resolve executor_pkg
--> TaskResolveRootRef::processing scope 
--> TaskResolveRootRef::visitSymbolScope id=executor_pkg ()
TaskResolveRootRef: imports: (nil)
TaskResolveRootRef: Found symbol executor_pkg @ index 2
--> AstSymbolTableIterator::getScopeSymbolPath
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope 
<-- TaskResolveRootRef::resolve 0xaf0fb0 (1)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa9c080
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 2
<-- TaskResolveRef::resolve 0xaf0fb0 (1)
<-- TaskResolveImports::  Resolve path
<-- TaskResolveImports::visitPackageImportStmt
--> TaskResolveImports::visitPackageImportStmt std_pkg
--> TaskResolveImports::  Resolve path
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier std_pkg
--> TaskResolveRootRef::resolve std_pkg
--> TaskResolveRootRef::processing scope 
--> TaskResolveRootRef::visitSymbolScope id=std_pkg ()
TaskResolveRootRef: imports: (nil)
TaskResolveRootRef: Found symbol std_pkg @ index 4
--> AstSymbolTableIterator::getScopeSymbolPath
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope 
<-- TaskResolveRootRef::resolve 0xaa74d0 (1)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 4
TaskResolveSymbolPathRef: Elem: ChildIdx 4
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xb0ea50
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 4
<-- TaskResolveRef::resolve 0xaa74d0 (1)
<-- TaskResolveImports::  Resolve path
<-- TaskResolveImports::visitPackageImportStmt
<-- TaskResolveImports::resolve
<-- TaskApplyTypeExtensions::  Resolve Imports
--> TaskApplyTypeExtensions::visitSymbolTypeScope addr_space_base_c
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope addr_trait_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope empty_addr_trait_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope addr_handle_t
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope contiguous_addr_space_c
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope transparent_addr_space_c
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope addr_region_base_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope addr_region_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope transparent_addr_region_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope addr_claim_base_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope addr_claim_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope transparent_addr_claim_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope sizeof_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope sized_addr_handle_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> TaskApplyTypeExtensions::visitSymbolEnumScope
<-- TaskApplyTypeExtensions::visitSymbolEnumScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope reg_c
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope reg_group_c
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskApplyTypeExtensions::visitSymbolScope
--> TaskApplyTypeExtensions::visitSymbolScope (executor_pkg)
--> TaskApplyTypeExtensions::  Resolve Imports
--> TaskResolveImports::resolve
--> TaskResolveImports::visitPackageImportStmt addr_reg_pkg
--> TaskResolveImports::  Resolve path
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_reg_pkg
--> TaskResolveRootRef::resolve addr_reg_pkg
--> TaskResolveRootRef::processing scope 
--> TaskResolveRootRef::visitSymbolScope id=addr_reg_pkg ()
TaskResolveRootRef: imports: (nil)
TaskResolveRootRef: Found symbol addr_reg_pkg @ index 1
--> AstSymbolTableIterator::getScopeSymbolPath
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope 
<-- TaskResolveRootRef::resolve 0xa92160 (1)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
<-- TaskResolveRef::resolve 0xa92160 (1)
<-- TaskResolveImports::  Resolve path
<-- TaskResolveImports::visitPackageImportStmt
<-- TaskResolveImports::resolve
<-- TaskApplyTypeExtensions::  Resolve Imports
--> TaskApplyTypeExtensions::visitSymbolTypeScope executor_trait_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope empty_executor_trait_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope executor_base_c
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope executor_c
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope executor_group_c
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope executor_claim_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskApplyTypeExtensions::visitSymbolScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope packed
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolScope (std_pkg)
--> TaskApplyTypeExtensions::visitSymbolEnumScope
<-- TaskApplyTypeExtensions::visitSymbolEnumScope
--> TaskApplyTypeExtensions::visitSymbolTypeScope packed_s
<-- TaskApplyTypeExtensions::visitSymbolTypeScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskApplyTypeExtensions::visitSymbolScope
--> TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolFunctionScope
<-- TaskApplyTypeExtensions::visitSymbolScope
<-- TaskApplyTypeExtensions::apply
--> TaskResolveRefs::resolve (SymbolScope root)
--> TaskLinkActionCompRefFields::visitSymbolScope 
--> TaskLinkActionCompRefFields::visitSymbolTypeScope pyobj
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope pyobj
--> TaskLinkActionCompRefFields::visitSymbolScope addr_reg_pkg
--> TaskLinkActionCompRefFields::visitSymbolTypeScope addr_space_base_c
--> TaskLinkActionCompRefFields::visitComponent addr_space_base_c
<-- TaskLinkActionCompRefFields::visitComponent addr_space_base_c
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope addr_space_base_c
--> TaskLinkActionCompRefFields::visitSymbolTypeScope addr_trait_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope addr_trait_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope empty_addr_trait_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope empty_addr_trait_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope addr_handle_t
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope addr_handle_t
--> TaskLinkActionCompRefFields::visitSymbolTypeScope contiguous_addr_space_c
--> TaskLinkActionCompRefFields::visitComponent contiguous_addr_space_c
<-- TaskLinkActionCompRefFields::visitComponent contiguous_addr_space_c
--> TaskLinkActionCompRefFields::visitSymbolScope add_region
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope add_region
--> TaskLinkActionCompRefFields::visitSymbolScope add_nonallocatable_region
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope add_nonallocatable_region
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope contiguous_addr_space_c
--> TaskLinkActionCompRefFields::visitSymbolTypeScope transparent_addr_space_c
--> TaskLinkActionCompRefFields::visitComponent transparent_addr_space_c
<-- TaskLinkActionCompRefFields::visitComponent transparent_addr_space_c
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope transparent_addr_space_c
--> TaskLinkActionCompRefFields::visitSymbolTypeScope addr_region_base_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope addr_region_base_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope addr_region_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope addr_region_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope transparent_addr_region_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope transparent_addr_region_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope addr_claim_base_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope addr_claim_base_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope addr_claim_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope addr_claim_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope transparent_addr_claim_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope transparent_addr_claim_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope sizeof_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope sizeof_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope sized_addr_handle_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope sized_addr_handle_s
--> TaskLinkActionCompRefFields::visitSymbolScope make_handle_from_claim
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope make_handle_from_claim
--> TaskLinkActionCompRefFields::visitSymbolScope make_handle_from_handle
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope make_handle_from_handle
--> TaskLinkActionCompRefFields::visitSymbolScope addr_value
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope addr_value
--> TaskLinkActionCompRefFields::visitSymbolScope read8
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope read8
--> TaskLinkActionCompRefFields::visitSymbolScope read16
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope read16
--> TaskLinkActionCompRefFields::visitSymbolScope read32
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope read32
--> TaskLinkActionCompRefFields::visitSymbolScope read64
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope read64
--> TaskLinkActionCompRefFields::visitSymbolScope write8
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope write8
--> TaskLinkActionCompRefFields::visitSymbolScope write16
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope write16
--> TaskLinkActionCompRefFields::visitSymbolScope write32
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope write32
--> TaskLinkActionCompRefFields::visitSymbolScope write64
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope write64
--> TaskLinkActionCompRefFields::visitSymbolScope reg_access
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope reg_access
--> TaskLinkActionCompRefFields::visitSymbolTypeScope reg_c
--> TaskLinkActionCompRefFields::visitComponent reg_c
<-- TaskLinkActionCompRefFields::visitComponent reg_c
--> TaskLinkActionCompRefFields::visitSymbolScope read
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope read
--> TaskLinkActionCompRefFields::visitSymbolScope write
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope write
--> TaskLinkActionCompRefFields::visitSymbolScope read_val
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope read_val
--> TaskLinkActionCompRefFields::visitSymbolScope write_val
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope write_val
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope reg_c
--> TaskLinkActionCompRefFields::visitSymbolTypeScope reg_group_c
--> TaskLinkActionCompRefFields::visitComponent reg_group_c
<-- TaskLinkActionCompRefFields::visitComponent reg_group_c
--> TaskLinkActionCompRefFields::visitSymbolScope get_offset_of_instance
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope get_offset_of_instance
--> TaskLinkActionCompRefFields::visitSymbolScope get_offset_of_instance_array
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope get_offset_of_instance_array
--> TaskLinkActionCompRefFields::visitSymbolScope set_handle
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope set_handle
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope reg_group_c
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskLinkActionCompRefFields::visitSymbolScope addr_reg_pkg
--> TaskLinkActionCompRefFields::visitSymbolScope executor_pkg
--> TaskLinkActionCompRefFields::visitSymbolTypeScope executor_trait_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope executor_trait_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope empty_executor_trait_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope empty_executor_trait_s
--> TaskLinkActionCompRefFields::visitSymbolTypeScope executor_base_c
--> TaskLinkActionCompRefFields::visitComponent executor_base_c
<-- TaskLinkActionCompRefFields::visitComponent executor_base_c
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope executor_base_c
--> TaskLinkActionCompRefFields::visitSymbolTypeScope executor_c
--> TaskLinkActionCompRefFields::visitComponent executor_c
<-- TaskLinkActionCompRefFields::visitComponent executor_c
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope executor_c
--> TaskLinkActionCompRefFields::visitSymbolTypeScope executor_group_c
--> TaskLinkActionCompRefFields::visitComponent executor_group_c
<-- TaskLinkActionCompRefFields::visitComponent executor_group_c
--> TaskLinkActionCompRefFields::visitSymbolScope add_executor
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope add_executor
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope executor_group_c
--> TaskLinkActionCompRefFields::visitSymbolTypeScope executor_claim_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope executor_claim_s
--> TaskLinkActionCompRefFields::visitSymbolScope executor
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope executor
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskLinkActionCompRefFields::visitSymbolScope executor_pkg
--> TaskLinkActionCompRefFields::visitSymbolTypeScope packed
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope packed
--> TaskLinkActionCompRefFields::visitSymbolScope std_pkg
--> TaskLinkActionCompRefFields::visitSymbolScope endianness_e
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope endianness_e
--> TaskLinkActionCompRefFields::visitSymbolTypeScope packed_s
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolTypeScope packed_s
--> TaskLinkActionCompRefFields::visitSymbolScope print
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope print
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskLinkActionCompRefFields::visitSymbolScope std_pkg
--> TaskLinkActionCompRefFields::visitSymbolScope doit
--> TaskLinkActionCompRefFields::visitSymbolScope <inner-exec>
--> TaskLinkActionCompRefFields::visitSymbolScope <if>
--> TaskLinkActionCompRefFields::visitSymbolScope <inner-exec>
--> AstSymbolTableIterator::popScope 6
<-- AstSymbolTableIterator::popScope - sz=5
<-- TaskLinkActionCompRefFields::visitSymbolScope <inner-exec>
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskLinkActionCompRefFields::visitSymbolScope <if>
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskLinkActionCompRefFields::visitSymbolScope <inner-exec>
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskLinkActionCompRefFields::visitSymbolScope doit
--> TaskLinkActionCompRefFields::visitSymbolScope <plist>
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskLinkActionCompRefFields::visitSymbolScope <plist>
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskLinkActionCompRefFields::visitSymbolScope 
--> TaskResolveRefs::visitSymbolTypeScope pyobj (param=false specialized=false)
TaskResolveRefs: No super type
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskResolveRefs::visitSymbolTypeScope pyobj
--> TaskResolveRefs::visitSymbolScope addr_reg_pkg
--> TaskResolveRefs::  Resolve Imports
--> TaskResolveImports::resolve
--> TaskResolveImports::visitPackageImportStmt executor_pkg
TaskResolveImports: Skip resolution, since the target is already set
<-- TaskResolveImports::visitPackageImportStmt
--> TaskResolveImports::visitPackageImportStmt std_pkg
TaskResolveImports: Skip resolution, since the target is already set
<-- TaskResolveImports::visitPackageImportStmt
<-- TaskResolveImports::resolve
<-- TaskResolveRefs::  Resolve Imports
TaskResolveRefs: Have 29 children
--> TaskResolveRefs::visit children
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope addr_space_base_c (param=false specialized=false)
TaskResolveRefs: No super type
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope addr_space_base_c
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope addr_trait_s (param=false specialized=false)
TaskResolveRefs: No super type
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope addr_trait_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope empty_addr_trait_s (param=false specialized=false)
TaskResolveRefs: empty_addr_trait_s Has a super type ... resolving
--> TaskResolveRefs::visitTypeIdentifier addr_trait_s
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_trait_s
--> TaskResolveRootRef::resolve addr_trait_s
--> TaskResolveRootRef::processing scope empty_addr_trait_s
--> TaskResolveRootRef::visitSymbolTypeScope id=addr_trait_s (empty_addr_trait_s)
--> TaskResolveRootRef::visitSymbolScope id=addr_trait_s (empty_addr_trait_s)
TaskResolveRootRef: imports: (nil)
--> zsp::parser::TaskResolveEnumRef::resolve
<-- zsp::parser::TaskResolveEnumRef::resolve
TaskResolveRootRef: Failed to find symbol
<-- TaskResolveRootRef::visitSymbolScope
TaskResolveRootRef: TypeScope: m_ref=(nil) plist=(nil)
<-- TaskResolveRootRef::visitSymbolTypeScope (nil)
<-- TaskResolveRootRef::processing scope empty_addr_trait_s
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_trait_s (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_trait_s @ index 1
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xb1a7f0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecae8
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 1
<-- TaskResolveRef::resolve 0xb1a7f0 (2)
<-- TaskResolveRefs::visitTypeIdentifier
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope empty_addr_trait_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope addr_handle_t (param=false specialized=false)
TaskResolveRefs: No super type
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope addr_handle_t
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope contiguous_addr_space_c (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope contiguous_addr_space_c
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope transparent_addr_space_c (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope transparent_addr_space_c
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope addr_region_base_s (param=false specialized=false)
TaskResolveRefs: No super type
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope addr_region_base_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope addr_region_s (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope addr_region_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope transparent_addr_region_s (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope transparent_addr_region_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope addr_claim_base_s (param=false specialized=false)
TaskResolveRefs: No super type
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope addr_claim_base_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope addr_claim_s (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope addr_claim_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope transparent_addr_claim_s (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope transparent_addr_claim_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope sizeof_s (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope sizeof_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xa8da30 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xa8da30 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope sized_addr_handle_s (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope sized_addr_handle_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope make_handle_from_claim (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0x9bf8a0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0x9bf8a0 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_claim_base_s
--> TaskResolveRootRef::resolve addr_claim_base_s
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_claim_base_s (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_claim_base_s @ index 9
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xb84610 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 9
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 9
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xb18938
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 9
<-- TaskResolveRef::resolve 0xb84610 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope make_handle_from_claim
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope make_handle_from_claim
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope make_handle_from_handle (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xb1a9a0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xb1a9a0 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xb1a6a0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xb1a6a0 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope make_handle_from_handle
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope make_handle_from_handle
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope addr_value (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xb7a1d0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xb7a1d0 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope addr_value
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope addr_value
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope read8 (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xaa8cd0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xaa8cd0 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope read8
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope read8
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope read16 (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xaabd10 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xaabd10 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope read16
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope read16
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope read32 (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0x9971f0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0x9971f0 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope read32
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope read32
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope read64 (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xb06550 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xb06550 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope read64
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope read64
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope write8 (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xaab370 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xaab370 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope write8
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope write8
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope write16 (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xbe1140 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xbe1140 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope write16
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope write16
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope write32 (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0x950f20 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0x950f20 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope write32
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope write32
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope write64 (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xa972b0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xa972b0 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope write64
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope write64
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolScope reg_access
TaskResolveRefs: Have 3 children
--> TaskResolveRefs::visit children
--> TaskResolveRefs::visit child
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
<-- TaskResolveRefs::visit child
<-- TaskResolveRefs::visit children
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolScope reg_access
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope reg_c (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope reg_c
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope reg_group_c (param=false specialized=false)
TaskResolveRefs: No super type
--> TaskResolveRefs::visitSymbolFunctionScope get_offset_of_instance (1)
--> TaskResolveRefs::visitFunctionPrototype
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope get_offset_of_instance
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskResolveRefs::visitSymbolFunctionScope get_offset_of_instance
--> TaskResolveRefs::visitSymbolFunctionScope get_offset_of_instance_array (1)
--> TaskResolveRefs::visitFunctionPrototype
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope get_offset_of_instance_array
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskResolveRefs::visitSymbolFunctionScope get_offset_of_instance_array
--> TaskResolveRefs::visitSymbolFunctionScope set_handle (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier addr_handle_t
--> TaskResolveRootRef::resolve addr_handle_t
--> TaskResolveRootRef::processing scope reg_group_c
--> TaskResolveRootRef::visitSymbolTypeScope id=addr_handle_t (reg_group_c)
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (reg_group_c)
TaskResolveRootRef: imports: (nil)
--> zsp::parser::TaskResolveEnumRef::resolve
<-- zsp::parser::TaskResolveEnumRef::resolve
TaskResolveRootRef: Failed to find symbol
<-- TaskResolveRootRef::visitSymbolScope
TaskResolveRootRef: TypeScope: m_ref=(nil) plist=(nil)
<-- TaskResolveRootRef::visitSymbolTypeScope (nil)
<-- TaskResolveRootRef::processing scope reg_group_c
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
--> TaskResolveRootRef::processing scope addr_reg_pkg
--> TaskResolveRootRef::visitSymbolScope id=addr_handle_t (addr_reg_pkg)
TaskResolveRootRef: imports: 0xa1d600
TaskResolveRootRef: Found symbol addr_handle_t @ index 3
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 1 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope addr_reg_pkg
<-- TaskResolveRootRef::resolve 0xb665d0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 1
TaskResolveRef:   0 3
<-- TaskResolveRef::resolve 0xb665d0 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope set_handle
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskResolveRefs::visitSymbolFunctionScope set_handle
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope reg_group_c
<-- TaskResolveRefs::visit child
<-- TaskResolveRefs::visit children
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskResolveRefs::visitSymbolScope addr_reg_pkg
--> TaskResolveRefs::visitSymbolScope executor_pkg
--> TaskResolveRefs::  Resolve Imports
--> TaskResolveImports::resolve
--> TaskResolveImports::visitPackageImportStmt addr_reg_pkg
TaskResolveImports: Skip resolution, since the target is already set
<-- TaskResolveImports::visitPackageImportStmt
<-- TaskResolveImports::resolve
<-- TaskResolveRefs::  Resolve Imports
TaskResolveRefs: Have 7 children
--> TaskResolveRefs::visit children
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope executor_trait_s (param=false specialized=false)
TaskResolveRefs: No super type
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope executor_trait_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope empty_executor_trait_s (param=false specialized=false)
TaskResolveRefs: empty_executor_trait_s Has a super type ... resolving
--> TaskResolveRefs::visitTypeIdentifier executor_trait_s
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier executor_trait_s
--> TaskResolveRootRef::resolve executor_trait_s
--> TaskResolveRootRef::processing scope empty_executor_trait_s
--> TaskResolveRootRef::visitSymbolTypeScope id=executor_trait_s (empty_executor_trait_s)
--> TaskResolveRootRef::visitSymbolScope id=executor_trait_s (empty_executor_trait_s)
TaskResolveRootRef: imports: (nil)
--> zsp::parser::TaskResolveEnumRef::resolve
<-- zsp::parser::TaskResolveEnumRef::resolve
TaskResolveRootRef: Failed to find symbol
<-- TaskResolveRootRef::visitSymbolScope
TaskResolveRootRef: TypeScope: m_ref=(nil) plist=(nil)
<-- TaskResolveRootRef::visitSymbolTypeScope (nil)
<-- TaskResolveRootRef::processing scope empty_executor_trait_s
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
--> TaskResolveRootRef::processing scope executor_pkg
--> TaskResolveRootRef::visitSymbolScope id=executor_trait_s (executor_pkg)
TaskResolveRootRef: imports: 0xb66350
TaskResolveRootRef: Found symbol executor_trait_s @ index 0
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 2 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope executor_pkg
<-- TaskResolveRootRef::resolve 0xa15e30 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Path: 0 0
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa9c080
TaskResolveSymbolPathRef: Elem: ChildIdx 0
TaskResolveSymbolPathRef:   scope 0xa9c080 => 0x9983f8
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 2
TaskResolveRef:   0 0
<-- TaskResolveRef::resolve 0xa15e30 (2)
<-- TaskResolveRefs::visitTypeIdentifier
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope empty_executor_trait_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope executor_base_c (param=false specialized=false)
TaskResolveRefs: No super type
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolTypeScope executor_base_c
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope executor_c (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope executor_c
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope executor_group_c (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope executor_group_c
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope executor_claim_s (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope executor_claim_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope executor (1)
--> TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitDataTypeUserDefined
--> TaskResolveRef::resolve
--> TaskResolveRef::visitTypeIdentifier executor_base_c
--> TaskResolveRootRef::resolve executor_base_c
--> TaskResolveRootRef::processing scope executor_pkg
--> TaskResolveRootRef::visitSymbolScope id=executor_base_c (executor_pkg)
TaskResolveRootRef: imports: 0xb66350
TaskResolveRootRef: Found symbol executor_base_c @ index 2
TaskResolveRootRef: Is a type scope
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 2 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
--> zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::visitSymbolTypeScope
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope executor_pkg
<-- TaskResolveRootRef::resolve 0xb8f750 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa9c080
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa9c080 => 0xaabcf8
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRef::visitTypeIdentifier
TaskResolveRef: Result:
TaskResolveRef:   0 2
TaskResolveRef:   0 2
<-- TaskResolveRef::resolve 0xb8f750 (2)
TaskResolveRefs: Success
<-- TaskResolveRefs::visitDataTypeUserDefined
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope executor
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope executor
<-- TaskResolveRefs::visit child
<-- TaskResolveRefs::visit children
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskResolveRefs::visitSymbolScope executor_pkg
--> TaskResolveRefs::visitSymbolTypeScope packed (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope packed
--> TaskResolveRefs::visitSymbolScope std_pkg
TaskResolveRefs: Have 3 children
--> TaskResolveRefs::visit children
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolScope endianness_e
TaskResolveRefs: Have 2 children
--> TaskResolveRefs::visit children
--> TaskResolveRefs::visit child
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
<-- TaskResolveRefs::visit child
<-- TaskResolveRefs::visit children
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolScope endianness_e
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolTypeScope packed_s (param=true specialized=false)
TaskResolveRefs: Note: Skipping symbol resolution in an unspecialized templated type
<-- TaskResolveRefs::visitSymbolTypeScope packed_s
<-- TaskResolveRefs::visit child
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolFunctionScope print (1)
--> TaskResolveRefs::visitFunctionPrototype
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope print
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolFunctionScope print
<-- TaskResolveRefs::visit child
<-- TaskResolveRefs::visit children
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskResolveRefs::visitSymbolScope std_pkg
--> TaskResolveRefs::visitSymbolFunctionScope doit (2)
--> TaskResolveRefs::visitFunctionPrototype
<-- TaskResolveRefs::visitFunctionPrototype
--> TaskResolveRefs::visitFunctionPrototype
<-- TaskResolveRefs::visitFunctionPrototype
TaskResolveRefs: Push function scope doit
--> TaskResolveRefs::visitSymbolExecScope "<inner-exec>"
--> TaskResolveRefs::visitSymbolScope <if>
TaskResolveRefs: Have 1 children
--> TaskResolveRefs::visit children
--> TaskResolveRefs::visit child
--> TaskResolveRefs::visitSymbolExecScope "<inner-exec>"
--> TaskResolveRefs::visitExprRefPathContext k
--> TaskResolveRef::resolve (RefPath)
--> TaskResolveRef::visitExprId k
--> TaskResolveRootRef::resolve k
--> TaskResolveRootRef::processing scope <inner-exec>
--> TaskResolveRootRef::visitSymbolExecScope
--> TaskResolveRootRef::visitSymbolScope id=k (<inner-exec>)
TaskResolveRootRef: imports: (nil)
--> zsp::parser::TaskResolveEnumRef::resolve
<-- zsp::parser::TaskResolveEnumRef::resolve
TaskResolveRootRef: Failed to find symbol
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::visitSymbolExecScope
<-- TaskResolveRootRef::processing scope <inner-exec>
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
--> TaskResolveRootRef::processing scope <if>
--> TaskResolveRootRef::visitSymbolScope id=k (<if>)
TaskResolveRootRef: imports: (nil)
--> zsp::parser::TaskResolveEnumRef::resolve
<-- zsp::parser::TaskResolveEnumRef::resolve
TaskResolveRootRef: Failed to find symbol
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope <if>
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
--> TaskResolveRootRef::processing scope <inner-exec>
--> TaskResolveRootRef::visitSymbolExecScope
--> TaskResolveRootRef::visitSymbolScope id=k (<inner-exec>)
TaskResolveRootRef: imports: (nil)
--> zsp::parser::TaskResolveEnumRef::resolve
<-- zsp::parser::TaskResolveEnumRef::resolve
TaskResolveRootRef: Failed to find symbol
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::visitSymbolExecScope
<-- TaskResolveRootRef::processing scope <inner-exec>
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
--> TaskResolveRootRef::processing scope doit
--> TaskResolveRootRef::visitSymbolFunctionScope doit (searching for k)
TaskResolveRootRef: Delegate to SymbolScope
--> TaskResolveRootRef::visitSymbolScope id=k (doit)
TaskResolveRootRef: imports: (nil)
TaskResolveRootRef: Found symbol k @ index 0
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 5 (idx=0)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::visitSymbolFunctionScope
<-- TaskResolveRootRef::processing scope doit
<-- TaskResolveRootRef::resolve 0xa0daa0 (2)
<-- TaskResolveRef::visitExprId k (0xa0daa0)
<-- TaskResolveRef::resolve (RefPath) 0xa0daa0 (2)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 5
TaskResolveSymbolPathRef: Path: 0 0
TaskResolveSymbolPathRef: Elem: ChildIdx 5
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa90d40
TaskResolveSymbolPathRef: Elem: ChildIdx 0
TaskResolveSymbolPathRef:   scope 0xa90d40 => 0x950c28
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRefs::visitExprRefPathContext
--> TaskResolveRefs::visitExprRefPathContext z
--> TaskResolveRef::resolve (RefPath)
--> TaskResolveRef::visitExprId z
--> TaskResolveRootRef::resolve z
--> TaskResolveRootRef::processing scope <inner-exec>
--> TaskResolveRootRef::visitSymbolExecScope
--> TaskResolveRootRef::visitSymbolScope id=z (<inner-exec>)
TaskResolveRootRef: imports: (nil)
--> zsp::parser::TaskResolveEnumRef::resolve
<-- zsp::parser::TaskResolveEnumRef::resolve
TaskResolveRootRef: Failed to find symbol
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::visitSymbolExecScope
<-- TaskResolveRootRef::processing scope <inner-exec>
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
--> TaskResolveRootRef::processing scope <if>
--> TaskResolveRootRef::visitSymbolScope id=z (<if>)
TaskResolveRootRef: imports: (nil)
--> zsp::parser::TaskResolveEnumRef::resolve
<-- zsp::parser::TaskResolveEnumRef::resolve
TaskResolveRootRef: Failed to find symbol
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::processing scope <if>
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
--> TaskResolveRootRef::processing scope <inner-exec>
--> TaskResolveRootRef::visitSymbolExecScope
--> TaskResolveRootRef::visitSymbolScope id=z (<inner-exec>)
TaskResolveRootRef: imports: (nil)
TaskResolveRootRef: Found symbol z @ index 0
--> AstSymbolTableIterator::getScopeSymbolPath
AstSymbolTableIterator: Add child-idx 5 (idx=0)
AstSymbolTableIterator: Add child-idx 2 (idx=1)
<-- AstSymbolTableIterator::getScopeSymbolPath
--> zsp::parser::TaskGetSymbolRefPathKind::get
<-- zsp::parser::TaskGetSymbolRefPathKind::get
<-- TaskResolveRootRef::visitSymbolScope
<-- TaskResolveRootRef::visitSymbolExecScope
<-- TaskResolveRootRef::processing scope <inner-exec>
<-- TaskResolveRootRef::resolve 0xa564d0 (3)
<-- TaskResolveRef::visitExprId z (0xa564d0)
<-- TaskResolveRef::resolve (RefPath) 0xa564d0 (3)
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 5
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Path: 0 0
TaskResolveSymbolPathRef: Elem: ChildIdx 5
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa90d40
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa90d40 => 0x989eb8
TaskResolveSymbolPathRef: Elem: ChildIdx 0
TaskResolveSymbolPathRef:   scope 0x989eb8 => 0xbd88a8
<-- TaskResolveSymbolPathRef::resolve
<-- TaskResolveRefs::visitExprRefPathContext
--> AstSymbolTableIterator::popScope 5
<-- AstSymbolTableIterator::popScope - sz=4
<-- TaskResolveRefs::visitSymbolExecScope "<inner-exec>"
<-- TaskResolveRefs::visit child
<-- TaskResolveRefs::visit children
--> AstSymbolTableIterator::popScope 4
<-- AstSymbolTableIterator::popScope - sz=3
<-- TaskResolveRefs::visitSymbolScope <if>
--> AstSymbolTableIterator::popScope 3
<-- AstSymbolTableIterator::popScope - sz=2
<-- TaskResolveRefs::visitSymbolExecScope "<inner-exec>"
--> AstSymbolTableIterator::popScope 2
<-- AstSymbolTableIterator::popScope - sz=1
<-- TaskResolveRefs::visitSymbolFunctionScope doit
<-- TaskResolveRefs::resolve
--> Ast2ArlBuilder::build 
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::link
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_reg_pkg
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_claim_s
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_claim_s 0xbc5818
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_reg_pkg 0xbc5818
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Is a Symbol TypeScope
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Set associated data for type addr_claim_s
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_reg_pkg
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: reg_c
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: reg_c 0xaa5868
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_reg_pkg 0xaa5868
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Is a Symbol TypeScope
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Set associated data for type reg_c
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_reg_pkg
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: reg_group_c
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: reg_group_c 0xb1d6d8
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_reg_pkg 0xb1d6d8
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Is a Symbol TypeScope
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Set associated data for type reg_group_c
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_reg_pkg
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: transparent_addr_space_c
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: transparent_addr_space_c 0xb94208
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: addr_reg_pkg 0xb94208
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Is a Symbol TypeScope
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Set associated data for type transparent_addr_space_c
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: std_pkg
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
--> zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: packed_s
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Found
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: packed_s 0xb183a8
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::findElem: std_pkg 0xb183a8
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Is a Symbol TypeScope
zsp::fe::parser::TaskLinkBuiltinTypeElemFactories: Set associated data for type packed_s
<-- zsp::fe::parser::TaskLinkBuiltinTypeElemFactories::link
--> Ast2ArlContext::pushSymScopeStack 
Ast2ArlContext: Push scope 
Ast2ArlContext: Full-push with root scope 
<-- Ast2ArlContext::pushSymScopeStack
--> Ast2ArlContext::pushSymScope  -> 2
Ast2ArlContext: PUSH: m_type_s_idx=1
Ast2ArlContext: m_scope_s.size: 2 m_type_s_idx: 1
<-- Ast2ArlContext::pushSymScope
--> Ast2ArlBuilder::visitSymbolTypeScope pyobj
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope pyobj
--> Ast2ArlContext::pushSymScopeStack pyobj
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope pyobj
Ast2ArlContext: Full-push with root scope pyobj
<-- Ast2ArlContext::pushSymScopeStack
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
Error: TaskBuildDataType: Failed to produce a data type
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope pyobj
--> Ast2ArlContext::pushSymScope addr_reg_pkg -> 3
Ast2ArlContext: PUSH: m_type_s_idx=2
Ast2ArlContext: m_scope_s.size: 3 m_type_s_idx: 2
<-- Ast2ArlContext::pushSymScope
--> Ast2ArlBuilder::visitSymbolTypeScope addr_space_base_c
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope addr_space_base_c
--> Ast2ArlContext::pushSymScopeStack addr_space_base_c
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_space_base_c
Ast2ArlContext: Full-push with root scope addr_space_base_c
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitComponent m_depth=0
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_space_base_c
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_space_base_c
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Building Component Type: addr_reg_pkg::addr_space_base_c
--> TaskBuildDataType::buildType addr_reg_pkg::addr_space_base_c (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_space_base_c (0)
<-- TaskBuildDataType::visitComponent
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope addr_space_base_c
--> Ast2ArlBuilder::visitSymbolTypeScope addr_trait_s
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope addr_trait_s
--> Ast2ArlContext::pushSymScopeStack addr_trait_s
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_trait_s
Ast2ArlContext: Full-push with root scope addr_trait_s
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_trait_s
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_trait_s
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_trait_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_trait_s
--> TaskBuildDataType::buildType addr_reg_pkg::addr_trait_s (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_trait_s (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope addr_trait_s
--> Ast2ArlBuilder::visitSymbolTypeScope empty_addr_trait_s
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope empty_addr_trait_s
--> Ast2ArlContext::pushSymScopeStack empty_addr_trait_s
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope empty_addr_trait_s
Ast2ArlContext: Full-push with root scope empty_addr_trait_s
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct empty_addr_trait_s
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope empty_addr_trait_s
zsp::fe::parser::TaskGetDataTypeAssocData: TODO: Keep looking through Super
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecae8
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_trait_s
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_trait_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope empty_addr_trait_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::empty_addr_trait_s
--> TaskBuildDataType::buildType addr_reg_pkg::empty_addr_trait_s (0)
--> TaskBuildDataType::buildTypeFields 1
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecae8
<-- TaskResolveSymbolPathRef::resolve
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::empty_addr_trait_s (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope empty_addr_trait_s
--> Ast2ArlBuilder::visitSymbolTypeScope addr_handle_t
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope addr_handle_t
--> Ast2ArlBuilder::visitSymbolTypeScope contiguous_addr_space_c
Ast2ArlBuilder: Skipping unspecialized parameterized type contiguous_addr_space_c
<-- Ast2ArlBuilder::visitSymbolTypeScope contiguous_addr_space_c
--> Ast2ArlBuilder::visitSymbolTypeScope transparent_addr_space_c
Ast2ArlBuilder: Skipping unspecialized parameterized type transparent_addr_space_c
<-- Ast2ArlBuilder::visitSymbolTypeScope transparent_addr_space_c
--> Ast2ArlBuilder::visitSymbolTypeScope addr_region_base_s
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope addr_region_base_s
--> Ast2ArlContext::pushSymScopeStack addr_region_base_s
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_region_base_s
Ast2ArlContext: Full-push with root scope addr_region_base_s
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_region_base_s
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_region_base_s
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_region_base_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_region_base_s
--> TaskBuildDataType::buildType addr_reg_pkg::addr_region_base_s (0)
--> TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::visitField size 1
--> TaskBuildField::build
--> TaskBuildField::visitField size
--> zsp::fe::parser::TaskGetDataTypeAssocData::get
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
<-- TaskBuildField::visitField
<-- TaskBuildField::build
<-- TaskBuildDataType::visitField size 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_region_base_s (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope addr_region_base_s
--> Ast2ArlBuilder::visitSymbolTypeScope addr_region_s
Ast2ArlBuilder: Skipping unspecialized parameterized type addr_region_s
<-- Ast2ArlBuilder::visitSymbolTypeScope addr_region_s
--> Ast2ArlBuilder::visitSymbolTypeScope transparent_addr_region_s
Ast2ArlBuilder: Skipping unspecialized parameterized type transparent_addr_region_s
<-- Ast2ArlBuilder::visitSymbolTypeScope transparent_addr_region_s
--> Ast2ArlBuilder::visitSymbolTypeScope addr_claim_base_s
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope addr_claim_base_s
--> Ast2ArlContext::pushSymScopeStack addr_claim_base_s
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_claim_base_s
Ast2ArlContext: Full-push with root scope addr_claim_base_s
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_claim_base_s
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_claim_base_s
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_claim_base_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_claim_base_s
--> TaskBuildDataType::buildType addr_reg_pkg::addr_claim_base_s (0)
--> TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::visitField size 1
--> TaskBuildField::build
--> TaskBuildField::visitField size
--> zsp::fe::parser::TaskGetDataTypeAssocData::get
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
<-- TaskBuildField::visitField
<-- TaskBuildField::build
<-- TaskBuildDataType::visitField size 1
--> TaskBuildDataType::visitField permanent 1
--> TaskBuildField::build
--> TaskBuildField::visitField permanent
--> zsp::fe::parser::TaskGetDataTypeAssocData::get
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeBool
<-- TaskBuildDataType::visitDataTypeBool
<-- TaskBuildDataType::build
<-- TaskBuildField::visitField
<-- TaskBuildField::build
<-- TaskBuildDataType::visitField permanent 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
--> zsp::fe::parser::TaskBuildTypeConstraintss::visitConstraintBlock 
<-- zsp::fe::parser::TaskBuildTypeConstraintss::visitConstraintBlock 
--> zsp::fe::parser::TaskBuildTypeConstraintss::visitConstraintBlock 
<-- zsp::fe::parser::TaskBuildTypeConstraintss::visitConstraintBlock 
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_claim_base_s (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope addr_claim_base_s
--> Ast2ArlBuilder::visitSymbolTypeScope addr_claim_s
Ast2ArlBuilder: Skipping unspecialized parameterized type addr_claim_s
<-- Ast2ArlBuilder::visitSymbolTypeScope addr_claim_s
--> Ast2ArlBuilder::visitSymbolTypeScope transparent_addr_claim_s
Ast2ArlBuilder: Skipping unspecialized parameterized type transparent_addr_claim_s
<-- Ast2ArlBuilder::visitSymbolTypeScope transparent_addr_claim_s
--> Ast2ArlBuilder::visitSymbolTypeScope sizeof_s
Ast2ArlBuilder: Skipping unspecialized parameterized type sizeof_s
<-- Ast2ArlBuilder::visitSymbolTypeScope sizeof_s
--> Ast2ArlBuilder::visitSymbolTypeScope sized_addr_handle_s
Ast2ArlBuilder: Skipping unspecialized parameterized type sized_addr_handle_s
<-- Ast2ArlBuilder::visitSymbolTypeScope sized_addr_handle_s
--> Ast2ArlBuilder::visitSymbolFunctionScope "make_handle_from_claim"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::make_handle_from_claim (make_handle_from_claim)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xa920a0)
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_claim_base_s
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=9
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 9
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 9
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xb18938
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_claim_base_s
--> Ast2ArlContext::pushSymScopeStack addr_claim_base_s
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_claim_base_s
Ast2ArlContext: Full-push with root scope addr_claim_base_s
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_claim_base_s
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_claim_base_s
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_claim_base_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_claim_base_s
--> TaskBuildDataType::buildType addr_reg_pkg::addr_claim_base_s (0)
--> TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::visitField size 1
--> TaskBuildField::build
--> TaskBuildField::visitField size
--> zsp::fe::parser::TaskGetDataTypeAssocData::get
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
<-- TaskBuildField::visitField
<-- TaskBuildField::build
<-- TaskBuildDataType::visitField size 1
--> TaskBuildDataType::visitField permanent 1
--> TaskBuildField::build
--> TaskBuildField::visitField permanent
--> zsp::fe::parser::TaskGetDataTypeAssocData::get
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeBool
<-- TaskBuildDataType::visitDataTypeBool
<-- TaskBuildDataType::build
<-- TaskBuildField::visitField
<-- TaskBuildField::build
<-- TaskBuildDataType::visitField permanent 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
--> zsp::fe::parser::TaskBuildTypeConstraintss::visitConstraintBlock 
<-- zsp::fe::parser::TaskBuildTypeConstraintss::visitConstraintBlock 
--> zsp::fe::parser::TaskBuildTypeConstraintss::visitConstraintBlock 
<-- zsp::fe::parser::TaskBuildTypeConstraintss::visitConstraintBlock 
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_claim_base_s (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xa9bd60)
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> zsp::fe::parser::TaskBuildExpr::build
--> zsp::fe::parser::TaskBuildExpr::expr
--> zsp::fe::parser::TaskBuildExpr::visitExprUnsignedNumber
<-- zsp::fe::parser::TaskBuildExpr::visitExprUnsignedNumber
<-- zsp::fe::parser::TaskBuildExpr::expr
<-- zsp::fe::parser::TaskBuildExpr::build 0xb352e0
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::make_handle_from_claim
<-- Ast2ArlBuilder::visitSymbolFunctionScope make_handle_from_claim
--> Ast2ArlBuilder::visitSymbolFunctionScope "make_handle_from_handle"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::make_handle_from_handle (make_handle_from_handle)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xb1a5e0)
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xa9df70)
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::make_handle_from_handle
<-- Ast2ArlBuilder::visitSymbolFunctionScope make_handle_from_handle
--> Ast2ArlBuilder::visitSymbolFunctionScope "addr_value"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::addr_value (addr_value)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xa9c160)
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::addr_value
<-- Ast2ArlBuilder::visitSymbolFunctionScope addr_value
--> Ast2ArlBuilder::visitSymbolFunctionScope "read8"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::read8 (read8)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=8
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xb1a8e0)
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::read8
<-- Ast2ArlBuilder::visitSymbolFunctionScope read8
--> Ast2ArlBuilder::visitSymbolFunctionScope "read16"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::read16 (read16)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=16
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xb84f00)
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::read16
<-- Ast2ArlBuilder::visitSymbolFunctionScope read16
--> Ast2ArlBuilder::visitSymbolFunctionScope "read32"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::read32 (read32)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=32
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xa97710)
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::read32
<-- Ast2ArlBuilder::visitSymbolFunctionScope read32
--> Ast2ArlBuilder::visitSymbolFunctionScope "read64"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::read64 (read64)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xa955e0)
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::read64
<-- Ast2ArlBuilder::visitSymbolFunctionScope read64
--> Ast2ArlBuilder::visitSymbolFunctionScope "write8"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::write8 (write8)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xa3dc00)
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=8
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::write8
<-- Ast2ArlBuilder::visitSymbolFunctionScope write8
--> Ast2ArlBuilder::visitSymbolFunctionScope "write16"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::write16 (write16)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xb209d0)
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=16
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::write16
<-- Ast2ArlBuilder::visitSymbolFunctionScope write16
--> Ast2ArlBuilder::visitSymbolFunctionScope "write32"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::write32 (write32)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xbe4a80)
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=32
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::write32
<-- Ast2ArlBuilder::visitSymbolFunctionScope write32
--> Ast2ArlBuilder::visitSymbolFunctionScope "write64"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::write64 (write64)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xab1410)
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::write64
<-- Ast2ArlBuilder::visitSymbolFunctionScope write64
--> Ast2ArlBuilder::visitSymbolEnumScope
--> TaskBuildEnumType::build
--> TaskBuildEnumType::visitEnumItem
<-- TaskBuildEnumType::visitEnumItem
--> TaskBuildEnumType::visitEnumItem
<-- TaskBuildEnumType::visitEnumItem
--> TaskBuildEnumType::visitEnumItem
<-- TaskBuildEnumType::visitEnumItem
<-- TaskBuildEnumType::build
<-- Ast2ArlBuilder::visitSymbolEnumScope
--> Ast2ArlBuilder::visitSymbolTypeScope reg_c
Ast2ArlBuilder: Skipping unspecialized parameterized type reg_c
<-- Ast2ArlBuilder::visitSymbolTypeScope reg_c
--> Ast2ArlBuilder::visitSymbolTypeScope reg_group_c
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope reg_group_c
--> Ast2ArlContext::pushSymScopeStack reg_group_c
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope reg_group_c
Ast2ArlContext: Full-push with root scope reg_group_c
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitComponent m_depth=0
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope reg_group_c
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope reg_group_c
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get 0xa14e50
TaskBuildDataType: Building Component Type: addr_reg_pkg::reg_group_c
TaskBuildDataType: Using elem-factory version
--> TaskBuildDataType::buildType addr_reg_pkg::reg_group_c (0)
--> TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::visitSymbolFunctionScope
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::get_offset_of_instance (get_offset_of_instance)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::get_offset_of_instance
<-- TaskBuildDataType::visitSymbolFunctionScope
--> TaskBuildDataType::visitSymbolFunctionScope
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::get_offset_of_instance_array (get_offset_of_instance_array)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=32
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::get_offset_of_instance_array
<-- TaskBuildDataType::visitSymbolFunctionScope
--> TaskBuildDataType::visitSymbolFunctionScope
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::set_handle (set_handle)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0xb0a320)
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::set_handle
<-- TaskBuildDataType::visitSymbolFunctionScope
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::reg_group_c (0)
--> TaskBuildDataType::visitSymbolFunctionScope
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::get_offset_of_instance (get_offset_of_instance)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::get_offset_of_instance
<-- TaskBuildDataType::visitSymbolFunctionScope
--> TaskBuildDataType::visitSymbolFunctionScope
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::get_offset_of_instance_array (get_offset_of_instance_array)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=64
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::build
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=32
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::get_offset_of_instance_array
<-- TaskBuildDataType::visitSymbolFunctionScope
--> TaskBuildDataType::visitSymbolFunctionScope
--> zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::set_handle (set_handle)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: addr_handle_t
TaskBuildDataType:   Elem: kind=0 idx=1
TaskBuildDataType:   Elem: kind=0 idx=3
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 1
TaskResolveSymbolPathRef: Path: 0 3
TaskResolveSymbolPathRef: Elem: ChildIdx 1
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa85930
TaskResolveSymbolPathRef: Elem: ChildIdx 3
TaskResolveSymbolPathRef:   scope 0xa85930 => 0xbecc18
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope addr_handle_t
--> Ast2ArlContext::pushSymScopeStack addr_handle_t
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope addr_reg_pkg
Ast2ArlContext: Push scope addr_handle_t
Ast2ArlContext: Full-push with root scope addr_handle_t
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct addr_handle_t
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope addr_handle_t
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: addr_reg_pkg::addr_handle_t
--> TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType addr_reg_pkg::addr_handle_t (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0x94fc00)
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build addr_reg_pkg::reg_group_c::set_handle
<-- TaskBuildDataType::visitSymbolFunctionScope
<-- TaskBuildDataType::visitComponent
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope reg_group_c
--> Ast2ArlContext::popSymScope addr_reg_pkg -> 2
Ast2ArlContext: POP: m_type_s_idx=1
Ast2ArlContext: m_scope_s.size: 2 m_type_s_idx: 1
<-- Ast2ArlContext::popSymScope
--> Ast2ArlContext::pushSymScope executor_pkg -> 3
Ast2ArlContext: PUSH: m_type_s_idx=2
Ast2ArlContext: m_scope_s.size: 3 m_type_s_idx: 2
<-- Ast2ArlContext::pushSymScope
--> Ast2ArlBuilder::visitSymbolTypeScope executor_trait_s
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope executor_trait_s
--> Ast2ArlContext::pushSymScopeStack executor_trait_s
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope executor_pkg
Ast2ArlContext: Push scope executor_trait_s
Ast2ArlContext: Full-push with root scope executor_trait_s
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct executor_trait_s
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope executor_trait_s
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope executor_trait_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: executor_pkg::executor_trait_s
--> TaskBuildDataType::buildType executor_pkg::executor_trait_s (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType executor_pkg::executor_trait_s (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope executor_trait_s
--> Ast2ArlBuilder::visitSymbolTypeScope empty_executor_trait_s
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope empty_executor_trait_s
--> Ast2ArlContext::pushSymScopeStack empty_executor_trait_s
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope executor_pkg
Ast2ArlContext: Push scope empty_executor_trait_s
Ast2ArlContext: Full-push with root scope empty_executor_trait_s
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitStruct empty_executor_trait_s
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope empty_executor_trait_s
zsp::fe::parser::TaskGetDataTypeAssocData: TODO: Keep looking through Super
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Path: 0 0
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa9c080
TaskResolveSymbolPathRef: Elem: ChildIdx 0
TaskResolveSymbolPathRef:   scope 0xa9c080 => 0x9983f8
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope executor_trait_s
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope executor_trait_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope empty_executor_trait_s
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Fullname: executor_pkg::empty_executor_trait_s
--> TaskBuildDataType::buildType executor_pkg::empty_executor_trait_s (0)
--> TaskBuildDataType::buildTypeFields 1
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Path: 0 0
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa9c080
TaskResolveSymbolPathRef: Elem: ChildIdx 0
TaskResolveSymbolPathRef:   scope 0xa9c080 => 0x9983f8
<-- TaskResolveSymbolPathRef::resolve
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType executor_pkg::empty_executor_trait_s (0)
<-- TaskBuildDataType::visitStruct
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope empty_executor_trait_s
--> Ast2ArlBuilder::visitSymbolTypeScope executor_base_c
Ast2ArlBuilder: Need to build type
--> TaskBuildDataType::build
--> TaskBuildDataType::visitSymbolTypeScope executor_base_c
--> Ast2ArlContext::pushSymScopeStack executor_base_c
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope executor_pkg
Ast2ArlContext: Push scope executor_base_c
Ast2ArlContext: Full-push with root scope executor_base_c
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitComponent m_depth=0
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope executor_base_c
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope executor_base_c
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Building Component Type: executor_pkg::executor_base_c
--> TaskBuildDataType::buildType executor_pkg::executor_base_c (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType executor_pkg::executor_base_c (0)
<-- TaskBuildDataType::visitComponent
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::build
<-- Ast2ArlBuilder::visitSymbolTypeScope executor_base_c
--> Ast2ArlBuilder::visitSymbolTypeScope executor_c
Ast2ArlBuilder: Skipping unspecialized parameterized type executor_c
<-- Ast2ArlBuilder::visitSymbolTypeScope executor_c
--> Ast2ArlBuilder::visitSymbolTypeScope executor_group_c
Ast2ArlBuilder: Skipping unspecialized parameterized type executor_group_c
<-- Ast2ArlBuilder::visitSymbolTypeScope executor_group_c
--> Ast2ArlBuilder::visitSymbolTypeScope executor_claim_s
Ast2ArlBuilder: Skipping unspecialized parameterized type executor_claim_s
<-- Ast2ArlBuilder::visitSymbolTypeScope executor_claim_s
--> Ast2ArlBuilder::visitSymbolFunctionScope "executor"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build executor_pkg::executor (executor)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeUserDefined
TaskBuildDataType:   TypeId Elem: executor_base_c
TaskBuildDataType:   Elem: kind=0 idx=2
TaskBuildDataType:   Elem: kind=0 idx=2
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa9c080
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa9c080 => 0xaabcf8
<-- TaskResolveSymbolPathRef::resolve
--> TaskResolveSymbolPathRef::visitSymbolTypeScope
<-- TaskResolveSymbolPathRef::visitSymbolTypeScope
TaskBuildDataType: kind=0
--> TaskBuildDataType::visitSymbolTypeScope executor_base_c
--> Ast2ArlContext::pushSymScopeStack executor_base_c
Ast2ArlContext: Push scope 
Ast2ArlContext: Push scope executor_pkg
Ast2ArlContext: Push scope executor_base_c
Ast2ArlContext: Full-push with root scope executor_base_c
<-- Ast2ArlContext::pushSymScopeStack
--> TaskBuildDataType::visitComponent m_depth=0
--> zsp::fe::parser::TaskGetDataTypeAssocData::get (ScopeChild)
--> zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope executor_base_c
zsp::fe::parser::TaskGetDataTypeAssocData: End of the line. Nothing else to search for
<-- zsp::fe::parser::TaskGetDataTypeAssocData::visitSymbolTypeScope executor_base_c
<-- zsp::fe::parser::TaskGetDataTypeAssocData::get (nil)
TaskBuildDataType: Building Component Type: executor_pkg::executor_base_c
--> TaskBuildDataType::buildType executor_pkg::executor_base_c (0)
--> TaskBuildDataType::buildTypeFields 1
<-- TaskBuildDataType::buildTypeFields 1
--> TaskBuildDataType::buildTypeConstraints
<-- TaskBuildDataType::buildTypeConstraints
--> TaskBuildTypeExecs::build
--> TaskBuildTypeExecs::visitSymbolTypeScope
TaskBuildTypeExecs: Target exec-kind: 0
TaskBuildTypeExecs: Target exec-kind: 7
TaskBuildTypeExecs: Target exec-kind: 8
TaskBuildTypeExecs: Target exec-kind: 5
TaskBuildTypeExecs: Target exec-kind: 6
<-- TaskBuildTypeExecs::visitSymbolTypeScope
<-- TaskBuildTypeExecs::build
<-- TaskBuildDataType::buildType executor_pkg::executor_base_c (0)
<-- TaskBuildDataType::visitComponent
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- TaskBuildDataType::visitSymbolTypeScope
<-- TaskBuildDataType::visitDataTypeUserDefined (0x702ad0)
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build executor_pkg::executor
<-- Ast2ArlBuilder::visitSymbolFunctionScope executor
--> Ast2ArlContext::popSymScope executor_pkg -> 2
Ast2ArlContext: POP: m_type_s_idx=1
Ast2ArlContext: m_scope_s.size: 2 m_type_s_idx: 1
<-- Ast2ArlContext::popSymScope
--> Ast2ArlBuilder::visitSymbolTypeScope packed
Ast2ArlBuilder: Skipping unspecialized parameterized type packed
<-- Ast2ArlBuilder::visitSymbolTypeScope packed
--> Ast2ArlContext::pushSymScope std_pkg -> 3
Ast2ArlContext: PUSH: m_type_s_idx=2
Ast2ArlContext: m_scope_s.size: 3 m_type_s_idx: 2
<-- Ast2ArlContext::pushSymScope
--> Ast2ArlBuilder::visitSymbolEnumScope
--> TaskBuildEnumType::build
--> TaskBuildEnumType::visitEnumItem
<-- TaskBuildEnumType::visitEnumItem
--> TaskBuildEnumType::visitEnumItem
<-- TaskBuildEnumType::visitEnumItem
<-- TaskBuildEnumType::build
<-- Ast2ArlBuilder::visitSymbolEnumScope
--> Ast2ArlBuilder::visitSymbolTypeScope packed_s
Ast2ArlBuilder: Skipping unspecialized parameterized type packed_s
<-- Ast2ArlBuilder::visitSymbolTypeScope packed_s
--> Ast2ArlBuilder::visitSymbolFunctionScope "print"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build std_pkg::print (print)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::visitDataTypeString
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: Import function
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build std_pkg::print
<-- Ast2ArlBuilder::visitSymbolFunctionScope print
--> Ast2ArlContext::popSymScope std_pkg -> 2
Ast2ArlContext: POP: m_type_s_idx=1
Ast2ArlContext: m_scope_s.size: 2 m_type_s_idx: 1
<-- Ast2ArlContext::popSymScope
--> Ast2ArlBuilder::visitSymbolFunctionScope "doit"
--> zsp::fe::parser::TaskBuildDataTypeFunction::build doit (doit)
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=32
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
zsp::fe::parser::TaskBuildDataTypeFunction: PSS-native function
--> Ast2ArlContext::pushSymScope doit -> 3
Ast2ArlContext: m_scope_s.size: 3 m_type_s_idx: 1
<-- Ast2ArlContext::pushSymScope
--> Ast2ArlContext::pushSymScope doit -> 4
Ast2ArlContext: m_scope_s.size: 4 m_type_s_idx: 1
<-- Ast2ArlContext::pushSymScope
--> zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtDataDeclaration
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=32
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtDataDeclaration
<-- zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtDataDeclaration
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=32
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtDataDeclaration
<-- zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitSymbolExecScope
--> Ast2ArlContext::pushSymScope <inner-exec> -> 5
Ast2ArlContext: m_scope_s.size: 5 m_type_s_idx: 1
<-- Ast2ArlContext::pushSymScope
--> zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtDataDeclaration
--> TaskBuildDataType::build
--> TaskBuildDataType::visitDataTypeInt
--> zsp::parser::TaskEvalExpr::eval
--> zsp::parser::TaskEvalExpr::visitExprUnsignedNumber width=32 value=32
<-- zsp::parser::TaskEvalExpr::visitExprUnsignedNumber
<-- zsp::parser::TaskEvalExpr::eval
<-- TaskBuildDataType::visitDataTypeInt
<-- TaskBuildDataType::build
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtDataDeclaration
<-- zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitSymbolChildrenScope
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtIfElse
--> zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitSymbolExecScope
--> Ast2ArlContext::pushSymScope <inner-exec> -> 6
Ast2ArlContext: m_scope_s.size: 6 m_type_s_idx: 1
<-- Ast2ArlContext::pushSymScope
--> zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtAssignment
--> zsp::fe::parser::TaskBuildExpr::build
--> zsp::fe::parser::TaskBuildExpr::expr
--> zsp::fe::parser::TaskBuildExpr::visitExprRefPathContext elem[0]=k
zsp::fe::parser::TaskBuildExpr: it: kind=0 idx=5
zsp::fe::parser::TaskBuildExpr: it: kind=0 idx=0
zsp::fe::parser::TaskBuildExpr: HierId (0xb84de0) .size=1
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
zsp::fe::parser::TaskBuildExpr: TypeScope: 
zsp::fe::parser::TaskBuildExpr: Path size=2 ; scope depth=6
zsp::fe::parser::TaskBuildExpr: Scope:  ; ii=0 idx=5
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
zsp::fe::parser::TaskBuildExpr: Scope= typeScope= symScope=<inner-exec>
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
--> Ast2ArlContext::findBottomUpScope 0xa83bb0
Ast2ArlContext: search: 6 1
Ast2ArlContext:   Scope[5] 0xac0a88
Ast2ArlContext:   Scope[4] 0x989eb8
Ast2ArlContext:   Scope[3] 0xa90d40
Ast2ArlContext:   Scope[2] 0xa90d40
<-- Ast2ArlContext::findBottomUpScope -1
zsp::fe::parser::TaskBuildExpr: Scope: doit ; ii=1 idx=0
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
zsp::fe::parser::TaskBuildExpr: Scope=doit typeScope= symScope=<inner-exec>
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
--> Ast2ArlContext::findBottomUpScope 0xa90d40
Ast2ArlContext: search: 6 1
Ast2ArlContext:   Scope[5] 0xac0a88
Ast2ArlContext:   Scope[4] 0x989eb8
Ast2ArlContext:   Scope[3] 0xa90d40
Ast2ArlContext: Found @ 3
<-- Ast2ArlContext::findBottomUpScope 2
zsp::fe::parser::TaskBuildExpr: bottom-up scope 2
zsp::fe::parser::TaskBuildExpr: type_scope_idx=-1 bup_scope_idx=2 ii=1 path.size=2
zsp::fe::parser::TaskBuildExpr: Processing bottom-up reference
zsp::fe::parser::TaskBuildExpr: Path elem: 0
zsp::fe::parser::TaskBuildExpr: Adding extra elem 0
zsp::fe::parser::TaskBuildExpr: Ref: kind=1 root_off=2 has 1 elements
zsp::fe::parser::TaskBuildExpr:   Elem[0] 0
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 5
TaskResolveSymbolPathRef: Path: 0 0
TaskResolveSymbolPathRef: Elem: ChildIdx 5
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa90d40
TaskResolveSymbolPathRef: Elem: ChildIdx 0
TaskResolveSymbolPathRef:   scope 0xa90d40 => 0x950c28
<-- TaskResolveSymbolPathRef::resolve
zsp::fe::parser::TaskBuildExpr: Path[0]: -1
<-- zsp::fe::parser::TaskBuildExpr::visitExprRefPathContext 0x9b8230
<-- zsp::fe::parser::TaskBuildExpr::expr
<-- zsp::fe::parser::TaskBuildExpr::build 0x9b8230
--> zsp::fe::parser::TaskBuildExpr::build
--> zsp::fe::parser::TaskBuildExpr::expr
--> zsp::fe::parser::TaskBuildExpr::visitExprUnsignedNumber
<-- zsp::fe::parser::TaskBuildExpr::visitExprUnsignedNumber
<-- zsp::fe::parser::TaskBuildExpr::expr
<-- zsp::fe::parser::TaskBuildExpr::build 0x9b8270
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtAssignment
<-- zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtAssignment
--> zsp::fe::parser::TaskBuildExpr::build
--> zsp::fe::parser::TaskBuildExpr::expr
--> zsp::fe::parser::TaskBuildExpr::visitExprRefPathContext elem[0]=z
zsp::fe::parser::TaskBuildExpr: it: kind=0 idx=5
zsp::fe::parser::TaskBuildExpr: it: kind=0 idx=2
zsp::fe::parser::TaskBuildExpr: it: kind=0 idx=0
zsp::fe::parser::TaskBuildExpr: HierId (0xaf8470) .size=1
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
zsp::fe::parser::TaskBuildExpr: TypeScope: 
zsp::fe::parser::TaskBuildExpr: Path size=3 ; scope depth=6
zsp::fe::parser::TaskBuildExpr: Scope:  ; ii=0 idx=5
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
zsp::fe::parser::TaskBuildExpr: Scope= typeScope= symScope=<inner-exec>
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
--> Ast2ArlContext::findBottomUpScope 0xa83bb0
Ast2ArlContext: search: 6 1
Ast2ArlContext:   Scope[5] 0xac0a88
Ast2ArlContext:   Scope[4] 0x989eb8
Ast2ArlContext:   Scope[3] 0xa90d40
Ast2ArlContext:   Scope[2] 0xa90d40
<-- Ast2ArlContext::findBottomUpScope -1
zsp::fe::parser::TaskBuildExpr: Scope: doit ; ii=1 idx=2
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
zsp::fe::parser::TaskBuildExpr: Scope=doit typeScope= symScope=<inner-exec>
--> Ast2ArlContext::typeScope m_type_s_idx=1 size=6
<-- Ast2ArlContext::typeScope 0xa83bb0
--> Ast2ArlContext::findBottomUpScope 0xa90d40
Ast2ArlContext: search: 6 1
Ast2ArlContext:   Scope[5] 0xac0a88
Ast2ArlContext:   Scope[4] 0x989eb8
Ast2ArlContext:   Scope[3] 0xa90d40
Ast2ArlContext: Found @ 3
<-- Ast2ArlContext::findBottomUpScope 2
zsp::fe::parser::TaskBuildExpr: bottom-up scope 2
zsp::fe::parser::TaskBuildExpr: type_scope_idx=-1 bup_scope_idx=2 ii=1 path.size=3
--> Ast2ArlContext::findBottomUpScope 0x989eb8
Ast2ArlContext: search: 6 1
Ast2ArlContext:   Scope[5] 0xac0a88
Ast2ArlContext:   Scope[4] 0x989eb8
Ast2ArlContext: Found @ 4
<-- Ast2ArlContext::findBottomUpScope 1
zsp::fe::parser::TaskBuildExpr: Found bottom-up scope 1 @ path index 1
zsp::fe::parser::TaskBuildExpr: Processing bottom-up reference
zsp::fe::parser::TaskBuildExpr: Path elem: 0
zsp::fe::parser::TaskBuildExpr: Adding extra elem 0
zsp::fe::parser::TaskBuildExpr: Ref: kind=1 root_off=1 has 1 elements
zsp::fe::parser::TaskBuildExpr:   Elem[0] 0
--> TaskResolveSymbolPathRef::resolve root=0xa83bb0
TaskResolveSymbolPathRef: Path: 0 5
TaskResolveSymbolPathRef: Path: 0 2
TaskResolveSymbolPathRef: Path: 0 0
TaskResolveSymbolPathRef: Elem: ChildIdx 5
TaskResolveSymbolPathRef:   scope 0xa83bb0 => 0xa90d40
TaskResolveSymbolPathRef: Elem: ChildIdx 2
TaskResolveSymbolPathRef:   scope 0xa90d40 => 0x989eb8
TaskResolveSymbolPathRef: Elem: ChildIdx 0
TaskResolveSymbolPathRef:   scope 0x989eb8 => 0xbd88a8
<-- TaskResolveSymbolPathRef::resolve
zsp::fe::parser::TaskBuildExpr: Path[0]: -1
<-- zsp::fe::parser::TaskBuildExpr::visitExprRefPathContext 0xaae8d0
<-- zsp::fe::parser::TaskBuildExpr::expr
<-- zsp::fe::parser::TaskBuildExpr::build 0xaae8d0
--> zsp::fe::parser::TaskBuildExpr::build
--> zsp::fe::parser::TaskBuildExpr::expr
--> zsp::fe::parser::TaskBuildExpr::visitExprUnsignedNumber
<-- zsp::fe::parser::TaskBuildExpr::visitExprUnsignedNumber
<-- zsp::fe::parser::TaskBuildExpr::expr
<-- zsp::fe::parser::TaskBuildExpr::build 0x9b82a0
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtAssignment
<-- zsp::fe::parser::TaskBuildTypeExecStmt::build
--> Ast2ArlContext::popSymScope <inner-exec> -> 5
Ast2ArlContext: POP: m_type_s_idx=1
Ast2ArlContext: m_scope_s.size: 5 m_type_s_idx: 1
<-- Ast2ArlContext::popSymScope
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitSymbolExecScope (2 items)
<-- zsp::fe::parser::TaskBuildTypeExecStmt::build
--> zsp::fe::parser::TaskBuildExpr::build
--> zsp::fe::parser::TaskBuildExpr::expr
--> zsp::fe::parser::TaskBuildExpr::visitExprBool
<-- zsp::fe::parser::TaskBuildExpr::visitExprBool
<-- zsp::fe::parser::TaskBuildExpr::expr
<-- zsp::fe::parser::TaskBuildExpr::build 0xa9b1e0
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitProceduralStmtIfElse
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitSymbolChildrenScope
<-- zsp::fe::parser::TaskBuildTypeExecStmt::build
--> Ast2ArlContext::popSymScope <inner-exec> -> 4
Ast2ArlContext: POP: m_type_s_idx=1
Ast2ArlContext: m_scope_s.size: 4 m_type_s_idx: 1
<-- Ast2ArlContext::popSymScope
<-- zsp::fe::parser::TaskBuildTypeExecStmt::visitSymbolExecScope (2 items)
<-- zsp::fe::parser::TaskBuildTypeExecStmt::build
--> Ast2ArlContext::popSymScope doit -> 3
Ast2ArlContext: POP: m_type_s_idx=1
Ast2ArlContext: m_scope_s.size: 3 m_type_s_idx: 1
<-- Ast2ArlContext::popSymScope
--> Ast2ArlContext::popSymScope doit -> 2
Ast2ArlContext: POP: m_type_s_idx=1
Ast2ArlContext: m_scope_s.size: 2 m_type_s_idx: 1
<-- Ast2ArlContext::popSymScope
<-- zsp::fe::parser::TaskBuildDataTypeFunction::build doit
<-- Ast2ArlBuilder::visitSymbolFunctionScope doit
--> Ast2ArlContext::popSymScope  -> 1
Ast2ArlContext: POP: m_type_s_idx=0
Ast2ArlContext: m_scope_s.size: 1 m_type_s_idx: 0
<-- Ast2ArlContext::popSymScope
--> Ast2ArlContext::popSymStack
<-- Ast2ArlContext::popSymStack
<-- Ast2ArlBuilder::build 
--> zsp::be::sw::TaskInitContextC::init
--> zsp::be::sw::TaskInitContextC::addMethodCallFactories
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::make_handle_from_claim
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::make_handle_from_handle
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::addr_value
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::read8
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::read16
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::read32
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::read64
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::write8
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::write16
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::write32
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::write64
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: -1 first_colon: 12
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::reg_group_c::get_offset_of_instance
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: 25 first_colon: 12
zsp::be::sw::TaskInitContextC: leaf: get_offset_of_instance
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::reg_group_c::get_offset_of_instance_array
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: 25 first_colon: 12
zsp::be::sw::TaskInitContextC: leaf: get_offset_of_instance_array
zsp::be::sw::TaskInitContextC: name: addr_reg_pkg::reg_group_c::set_handle
zsp::be::sw::TaskInitContextC: pkgname: addr_reg_pkg
zsp::be::sw::TaskInitContextC: next_colon: 25 first_colon: 12
zsp::be::sw::TaskInitContextC: leaf: set_handle
zsp::be::sw::TaskInitContextC: name: executor_pkg::executor
zsp::be::sw::TaskInitContextC: pkgname: executor_pkg
zsp::be::sw::TaskInitContextC: name: std_pkg::print
zsp::be::sw::TaskInitContextC: pkgname: std_pkg
zsp::be::sw::TaskInitContextC: name: doit
<-- zsp::be::sw::TaskInitContextC::addMethodCallFactories
<-- zsp::be::sw::TaskInitContextC::init
Function[0]: 0xa0d910Function[1]: 0xa89320Function[2]: 0xab7ea0Function[3]: 0xbcbdf0Function[4]: 0xa9f370Function[5]: 0xbd6280Function[6]: 0x98a5a0Function[7]: 0x99e780Function[8]: 0x98dd80--> zsp::be::sw::TaskGenerateC::generate
--> TaskGenerateEmbCProcScope::visitTypeProcStmtScope
--> TaskGenerateEmbCProcScope::visitTypeProcStmtScope
--> TaskGenerateEmbCProcScope::visitTypeProcStmtIfElse
--> zsp::be::sw::TaskGenerateEmbCExpr::generate
--> zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprVal
--> zsp::be::sw::TaskGenerateEmbCVal::generate
--> zsp::be::sw::TaskGenerateEmbCVal::visitDataTypeBool
<-- zsp::be::sw::TaskGenerateEmbCVal::visitDataTypeBool
<-- zsp::be::sw::TaskGenerateEmbCVal::generate
<-- zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprVal
<-- zsp::be::sw::TaskGenerateEmbCExpr::generate
--> TaskGenerateEmbCProcScope::generate if-clause statement
--> TaskGenerateEmbCProcScope::visitTypeProcStmtScope
--> zsp::be::sw::TaskGenerateEmbCExpr::generate
--> zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprFieldRef kind=1 root_offset=2
zsp::be::sw::TaskGenerateEmbCExpr:   Elem[0] 0
<-- zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprFieldRef
<-- zsp::be::sw::TaskGenerateEmbCExpr::generate
--> zsp::be::sw::TaskGenerateEmbCExpr::generate
--> zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprVal
--> zsp::be::sw::TaskGenerateEmbCVal::generate
--> zsp::be::sw::TaskGenerateEmbCVal::visitDataTypeInt
<-- zsp::be::sw::TaskGenerateEmbCVal::visitDataTypeInt
<-- zsp::be::sw::TaskGenerateEmbCVal::generate
<-- zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprVal
<-- zsp::be::sw::TaskGenerateEmbCExpr::generate
--> zsp::be::sw::TaskGenerateEmbCExpr::generate
--> zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprFieldRef kind=1 root_offset=1
zsp::be::sw::TaskGenerateEmbCExpr:   Elem[0] 0
<-- zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprFieldRef
<-- zsp::be::sw::TaskGenerateEmbCExpr::generate
--> zsp::be::sw::TaskGenerateEmbCExpr::generate
--> zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprVal
--> zsp::be::sw::TaskGenerateEmbCVal::generate
--> zsp::be::sw::TaskGenerateEmbCVal::visitDataTypeInt
<.
----------------------------------------------------------------------
Ran 1 test in 2.156s

OK
-- zsp::be::sw::TaskGenerateEmbCVal::visitDataTypeInt
<-- zsp::be::sw::TaskGenerateEmbCVal::generate
<-- zsp::be::sw::TaskGenerateEmbCExpr::visitTypeExprVal
<-- zsp::be::sw::TaskGenerateEmbCExpr::generate
<-- TaskGenerateEmbCProcScope::visitTypeProcStmtScope
<-- TaskGenerateEmbCProcScope::generate if-clause statement
<-- TaskGenerateEmbCProcScope::visitTypeProcStmtIfElse
<-- TaskGenerateEmbCProcScope::visitTypeProcStmtScope
<-- TaskGenerateEmbCProcScope::visitTypeProcStmtScope
<-- zsp::be::sw::TaskGenerateC::generate
csrc:
void doit(inti) {
    {
        int k;
        int j;
        {
            int z;
            if (true)             {
                k = 1;
                z = 2;
            }

        }
    }
}

pub_h:

prv_h:
void doit(inti);

[Inferior 1 (process 1636035) exited normally]
Missing separate debuginfos, use: yum debuginfo-install bzip2-libs-1.0.6-26.el8.x86_64 libffi-3.1-22.el8.x86_64 libgcc-8.5.0-4.el8_5.x86_64 libstdc++-8.5.0-4.el8_5.x86_64 libuuid-2.32.1-28.el8.x86_64 xz-libs-5.2.4-3.el8.x86_64 zlib-1.2.11-17.el8.x86_64
(gdb) [K(gdb) [K(gdb) [K(gdb) [K(gdb) [K(gdb) [K(gdb) 